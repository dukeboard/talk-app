{"version":3,"sources":["fake","../c:/Alex/src/vscode/out-build/vs/css.js"],"names":[],"mappingsfile":"vs/css.js","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.6.1(8f43cf5d0d3d233c9ba1c9085f2bb529f834c841)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar _cssPluginGlobal = this;\nvar CSSLoaderPlugin;\n(function (CSSLoaderPlugin) {\n    var global = _cssPluginGlobal;\n    /**\n     * Known issue:\n     * - In IE there is no way to know if the CSS file loaded successfully or not.\n     */\n    var BrowserCSSLoader = (function () {\n        function BrowserCSSLoader() {\n            this._pendingLoads = 0;\n        }\n        BrowserCSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\n            var unbind = function () {\n                linkNode.removeEventListener('load', loadEventListener);\n                linkNode.removeEventListener('error', errorEventListener);\n            };\n            var loadEventListener = function (e) {\n                unbind();\n                callback();\n            };\n            var errorEventListener = function (e) {\n                unbind();\n                errorback(e);\n            };\n            linkNode.addEventListener('load', loadEventListener);\n            linkNode.addEventListener('error', errorEventListener);\n        };\n        BrowserCSSLoader.prototype._onLoad = function (name, callback) {\n            this._pendingLoads--;\n            callback();\n        };\n        BrowserCSSLoader.prototype._onLoadError = function (name, errorback, err) {\n            this._pendingLoads--;\n            errorback(err);\n        };\n        BrowserCSSLoader.prototype._insertLinkNode = function (linkNode) {\n            this._pendingLoads++;\n            var head = document.head || document.getElementsByTagName('head')[0];\n            var other = head.getElementsByTagName('link') || document.head.getElementsByTagName('script');\n            if (other.length > 0) {\n                head.insertBefore(linkNode, other[other.length - 1]);\n            }\n            else {\n                head.appendChild(linkNode);\n            }\n        };\n        BrowserCSSLoader.prototype.createLinkTag = function (name, cssUrl, externalCallback, externalErrorback) {\n            var _this = this;\n            var linkNode = document.createElement('link');\n            linkNode.setAttribute('rel', 'stylesheet');\n            linkNode.setAttribute('type', 'text/css');\n            linkNode.setAttribute('data-name', name);\n            var callback = function () { return _this._onLoad(name, externalCallback); };\n            var errorback = function (err) { return _this._onLoadError(name, externalErrorback, err); };\n            this.attachListeners(name, linkNode, callback, errorback);\n            linkNode.setAttribute('href', cssUrl);\n            return linkNode;\n        };\n        BrowserCSSLoader.prototype._linkTagExists = function (name, cssUrl) {\n            var i, len, nameAttr, hrefAttr, links = document.getElementsByTagName('link');\n            for (i = 0, len = links.length; i < len; i++) {\n                nameAttr = links[i].getAttribute('data-name');\n                hrefAttr = links[i].getAttribute('href');\n                if (nameAttr === name || hrefAttr === cssUrl) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        BrowserCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            if (this._linkTagExists(name, cssUrl)) {\n                externalCallback();\n                return;\n            }\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\n            this._insertLinkNode(linkNode);\n        };\n        return BrowserCSSLoader;\n    }());\n    /**\n     * Prior to IE10, IE could not go above 31 stylesheets in a page\n     * http://blogs.msdn.com/b/ieinternals/archive/2011/05/14/internet-explorer-stylesheet-rule-selector-import-sheet-limit-maximum.aspx\n     *\n     * The general strategy here is to not write more than 31 link nodes to the page at the same time\n     * When stylesheets get loaded, they will get merged one into another to free up\n     * some positions for new link nodes.\n     */\n    var IE9CSSLoader = (function (_super) {\n        __extends(IE9CSSLoader, _super);\n        function IE9CSSLoader() {\n            _super.call(this);\n            this._blockedLoads = [];\n            this._mergeStyleSheetsTimeout = -1;\n        }\n        IE9CSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            if (this._linkTagExists(name, cssUrl)) {\n                externalCallback();\n                return;\n            }\n            var linkNode = this.createLinkTag(name, cssUrl, externalCallback, externalErrorback);\n            if (this._styleSheetCount() < 31) {\n                this._insertLinkNode(linkNode);\n            }\n            else {\n                this._blockedLoads.push(linkNode);\n                this._handleBlocked();\n            }\n        };\n        IE9CSSLoader.prototype._styleSheetCount = function () {\n            var linkCount = document.getElementsByTagName('link').length;\n            var styleCount = document.getElementsByTagName('style').length;\n            return linkCount + styleCount;\n        };\n        IE9CSSLoader.prototype._onLoad = function (name, callback) {\n            _super.prototype._onLoad.call(this, name, callback);\n            this._handleBlocked();\n        };\n        IE9CSSLoader.prototype._onLoadError = function (name, errorback, err) {\n            _super.prototype._onLoadError.call(this, name, errorback, err);\n            this._handleBlocked();\n        };\n        IE9CSSLoader.prototype._handleBlocked = function () {\n            var _this = this;\n            var blockedLoadsCount = this._blockedLoads.length;\n            if (blockedLoadsCount > 0 && this._mergeStyleSheetsTimeout === -1) {\n                this._mergeStyleSheetsTimeout = window.setTimeout(function () { return _this._mergeStyleSheets(); }, 0);\n            }\n        };\n        IE9CSSLoader.prototype._mergeStyleSheet = function (dstPath, dst, srcPath, src) {\n            for (var i = src.rules.length - 1; i >= 0; i--) {\n                dst.insertRule(Utilities.rewriteUrls(srcPath, dstPath, src.rules[i].cssText), 0);\n            }\n        };\n        IE9CSSLoader.prototype._asIE9HTMLLinkElement = function (linkElement) {\n            return linkElement;\n        };\n        IE9CSSLoader.prototype._mergeStyleSheets = function () {\n            this._mergeStyleSheetsTimeout = -1;\n            var blockedLoadsCount = this._blockedLoads.length;\n            var i, linkDomNodes = document.getElementsByTagName('link');\n            var linkDomNodesCount = linkDomNodes.length;\n            var mergeCandidates = [];\n            for (i = 0; i < linkDomNodesCount; i++) {\n                if (linkDomNodes[i].readyState === 'loaded' || linkDomNodes[i].readyState === 'complete') {\n                    mergeCandidates.push({\n                        linkNode: linkDomNodes[i],\n                        rulesLength: this._asIE9HTMLLinkElement(linkDomNodes[i]).styleSheet.rules.length\n                    });\n                }\n            }\n            var mergeCandidatesCount = mergeCandidates.length;\n            // Just a little legend here :)\n            // - linkDomNodesCount: total number of link nodes in the DOM (this should be kept <= 31)\n            // - mergeCandidatesCount: loaded (finished) link nodes in the DOM (only these can be merged)\n            // - blockedLoadsCount: remaining number of load requests that did not fit in before (because of the <= 31 constraint)\n            // Now comes the heuristic part, we don't want to do too much work with the merging of styles,\n            // but we do need to merge stylesheets to free up loading slots.\n            var mergeCount = Math.min(Math.floor(mergeCandidatesCount / 2), blockedLoadsCount);\n            // Sort the merge candidates descending (least rules last)\n            mergeCandidates.sort(function (a, b) {\n                return b.rulesLength - a.rulesLength;\n            });\n            var srcIndex, dstIndex;\n            for (i = 0; i < mergeCount; i++) {\n                srcIndex = mergeCandidates.length - 1 - i;\n                dstIndex = i % (mergeCandidates.length - mergeCount);\n                // Merge rules of src into dst\n                this._mergeStyleSheet(mergeCandidates[dstIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[dstIndex].linkNode).styleSheet, mergeCandidates[srcIndex].linkNode.href, this._asIE9HTMLLinkElement(mergeCandidates[srcIndex].linkNode).styleSheet);\n                // Remove dom node of src\n                mergeCandidates[srcIndex].linkNode.parentNode.removeChild(mergeCandidates[srcIndex].linkNode);\n                linkDomNodesCount--;\n            }\n            var styleSheetCount = this._styleSheetCount();\n            while (styleSheetCount < 31 && this._blockedLoads.length > 0) {\n                this._insertLinkNode(this._blockedLoads.shift());\n                styleSheetCount++;\n            }\n        };\n        return IE9CSSLoader;\n    }(BrowserCSSLoader));\n    var IE8CSSLoader = (function (_super) {\n        __extends(IE8CSSLoader, _super);\n        function IE8CSSLoader() {\n            _super.call(this);\n        }\n        IE8CSSLoader.prototype.attachListeners = function (name, linkNode, callback, errorback) {\n            linkNode.onload = function () {\n                linkNode.onload = null;\n                callback();\n            };\n        };\n        return IE8CSSLoader;\n    }(IE9CSSLoader));\n    var NodeCSSLoader = (function () {\n        function NodeCSSLoader() {\n            this.fs = require.nodeRequire('fs');\n        }\n        NodeCSSLoader.prototype.load = function (name, cssUrl, externalCallback, externalErrorback) {\n            var contents = this.fs.readFileSync(cssUrl, 'utf8');\n            // Remove BOM\n            if (contents.charCodeAt(0) === NodeCSSLoader.BOM_CHAR_CODE) {\n                contents = contents.substring(1);\n            }\n            externalCallback(contents);\n        };\n        NodeCSSLoader.BOM_CHAR_CODE = 65279;\n        return NodeCSSLoader;\n    }());\n    // ------------------------------ Finally, the plugin\n    var CSSPlugin = (function () {\n        function CSSPlugin(cssLoader) {\n            this.cssLoader = cssLoader;\n        }\n        CSSPlugin.prototype.load = function (name, req, load, config) {\n            config = config || {};\n            var myConfig = config['vs/css'] || {};\n            global.inlineResources = myConfig.inlineResources;\n            var cssUrl = req.toUrl(name + '.css');\n            this.cssLoader.load(name, cssUrl, function (contents) {\n                // Contents has the CSS file contents if we are in a build\n                if (config.isBuild) {\n                    CSSPlugin.BUILD_MAP[name] = contents;\n                    CSSPlugin.BUILD_PATH_MAP[name] = cssUrl;\n                }\n                load({});\n            }, function (err) {\n                if (typeof load.error === 'function') {\n                    load.error('Could not find ' + cssUrl + ' or it was empty');\n                }\n            });\n        };\n        CSSPlugin.prototype.write = function (pluginName, moduleName, write) {\n            // getEntryPoint is a Monaco extension to r.js\n            var entryPoint = write.getEntryPoint();\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\n            // so the only option at this point is to leak the data to a global\n            global.cssPluginEntryPoints = global.cssPluginEntryPoints || {};\n            global.cssPluginEntryPoints[entryPoint] = global.cssPluginEntryPoints[entryPoint] || [];\n            global.cssPluginEntryPoints[entryPoint].push({\n                moduleName: moduleName,\n                contents: CSSPlugin.BUILD_MAP[moduleName],\n                fsPath: CSSPlugin.BUILD_PATH_MAP[moduleName],\n            });\n            write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/css!' + entryPoint + '\\'], {});');\n        };\n        CSSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\n            if (global.cssPluginEntryPoints && global.cssPluginEntryPoints.hasOwnProperty(moduleName)) {\n                var fileName = req.toUrl(moduleName + '.css');\n                var contents = [\n                    '/*---------------------------------------------------------',\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\n                    ' *--------------------------------------------------------*/'\n                ], entries = global.cssPluginEntryPoints[moduleName];\n                for (var i = 0; i < entries.length; i++) {\n                    if (global.inlineResources) {\n                        contents.push(Utilities.rewriteOrInlineUrls(entries[i].fsPath, entries[i].moduleName, moduleName, entries[i].contents, global.inlineResources === 'base64'));\n                    }\n                    else {\n                        contents.push(Utilities.rewriteUrls(entries[i].moduleName, moduleName, entries[i].contents));\n                    }\n                }\n                write(fileName, contents.join('\\r\\n'));\n            }\n        };\n        CSSPlugin.prototype.getInlinedResources = function () {\n            return global.cssInlinedResources || [];\n        };\n        CSSPlugin.BUILD_MAP = {};\n        CSSPlugin.BUILD_PATH_MAP = {};\n        return CSSPlugin;\n    }());\n    CSSLoaderPlugin.CSSPlugin = CSSPlugin;\n    var Utilities = (function () {\n        function Utilities() {\n        }\n        Utilities.startsWith = function (haystack, needle) {\n            return haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n        };\n        /**\n         * Find the path of a file.\n         */\n        Utilities.pathOf = function (filename) {\n            var lastSlash = filename.lastIndexOf('/');\n            if (lastSlash !== -1) {\n                return filename.substr(0, lastSlash + 1);\n            }\n            else {\n                return '';\n            }\n        };\n        /**\n         * A conceptual a + b for paths.\n         * Takes into account if `a` contains a protocol.\n         * Also normalizes the result: e.g.: a/b/ + ../c => a/c\n         */\n        Utilities.joinPaths = function (a, b) {\n            function findSlashIndexAfterPrefix(haystack, prefix) {\n                if (Utilities.startsWith(haystack, prefix)) {\n                    return Math.max(prefix.length, haystack.indexOf('/', prefix.length));\n                }\n                return 0;\n            }\n            var aPathStartIndex = 0;\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, '//');\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'http://');\n            aPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'https://');\n            function pushPiece(pieces, piece) {\n                if (piece === './') {\n                    // Ignore\n                    return;\n                }\n                if (piece === '../') {\n                    var prevPiece = (pieces.length > 0 ? pieces[pieces.length - 1] : null);\n                    if (prevPiece && prevPiece === '/') {\n                        // Ignore\n                        return;\n                    }\n                    if (prevPiece && prevPiece !== '../') {\n                        // Pop\n                        pieces.pop();\n                        return;\n                    }\n                }\n                // Push\n                pieces.push(piece);\n            }\n            function push(pieces, path) {\n                while (path.length > 0) {\n                    var slashIndex = path.indexOf('/');\n                    var piece = (slashIndex >= 0 ? path.substring(0, slashIndex + 1) : path);\n                    path = (slashIndex >= 0 ? path.substring(slashIndex + 1) : '');\n                    pushPiece(pieces, piece);\n                }\n            }\n            var pieces = [];\n            push(pieces, a.substr(aPathStartIndex));\n            if (b.length > 0 && b.charAt(0) === '/') {\n                pieces = [];\n            }\n            push(pieces, b);\n            return a.substring(0, aPathStartIndex) + pieces.join('');\n        };\n        Utilities.commonPrefix = function (str1, str2) {\n            var len = Math.min(str1.length, str2.length);\n            for (var i = 0; i < len; i++) {\n                if (str1.charCodeAt(i) !== str2.charCodeAt(i)) {\n                    break;\n                }\n            }\n            return str1.substring(0, i);\n        };\n        Utilities.commonFolderPrefix = function (fromPath, toPath) {\n            var prefix = Utilities.commonPrefix(fromPath, toPath);\n            var slashIndex = prefix.lastIndexOf('/');\n            if (slashIndex === -1) {\n                return '';\n            }\n            return prefix.substring(0, slashIndex + 1);\n        };\n        Utilities.relativePath = function (fromPath, toPath) {\n            if (Utilities.startsWith(toPath, '/') || Utilities.startsWith(toPath, 'http://') || Utilities.startsWith(toPath, 'https://')) {\n                return toPath;\n            }\n            // Ignore common folder prefix\n            var prefix = Utilities.commonFolderPrefix(fromPath, toPath);\n            fromPath = fromPath.substr(prefix.length);\n            toPath = toPath.substr(prefix.length);\n            var upCount = fromPath.split('/').length;\n            var result = '';\n            for (var i = 1; i < upCount; i++) {\n                result += '../';\n            }\n            return result + toPath;\n        };\n        Utilities._replaceURL = function (contents, replacer) {\n            // Use \")\" as the terminator as quotes are oftentimes not used at all\n            return contents.replace(/url\\(\\s*([^\\)]+)\\s*\\)?/g, function (_) {\n                var matches = [];\n                for (var _i = 1; _i < arguments.length; _i++) {\n                    matches[_i - 1] = arguments[_i];\n                }\n                var url = matches[0];\n                // Eliminate starting quotes (the initial whitespace is not captured)\n                if (url.charAt(0) === '\"' || url.charAt(0) === '\\'') {\n                    url = url.substring(1);\n                }\n                // The ending whitespace is captured\n                while (url.length > 0 && (url.charAt(url.length - 1) === ' ' || url.charAt(url.length - 1) === '\\t')) {\n                    url = url.substring(0, url.length - 1);\n                }\n                // Eliminate ending quotes\n                if (url.charAt(url.length - 1) === '\"' || url.charAt(url.length - 1) === '\\'') {\n                    url = url.substring(0, url.length - 1);\n                }\n                if (!Utilities.startsWith(url, 'data:') && !Utilities.startsWith(url, 'http://') && !Utilities.startsWith(url, 'https://')) {\n                    url = replacer(url);\n                }\n                return 'url(' + url + ')';\n            });\n        };\n        Utilities.rewriteUrls = function (originalFile, newFile, contents) {\n            return this._replaceURL(contents, function (url) {\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\n                return Utilities.relativePath(newFile, absoluteUrl);\n            });\n        };\n        Utilities.rewriteOrInlineUrls = function (originalFileFSPath, originalFile, newFile, contents, forceBase64) {\n            var fs = require.nodeRequire('fs');\n            var path = require.nodeRequire('path');\n            return this._replaceURL(contents, function (url) {\n                if (/\\.(svg|png)$/.test(url)) {\n                    var fsPath = path.join(path.dirname(originalFileFSPath), url);\n                    var fileContents = fs.readFileSync(fsPath);\n                    if (fileContents.length < 3000) {\n                        global.cssInlinedResources = global.cssInlinedResources || [];\n                        var normalizedFSPath = fsPath.replace(/\\\\/g, '/');\n                        if (global.cssInlinedResources.indexOf(normalizedFSPath) >= 0) {\n                            console.warn('CSS INLINING IMAGE AT ' + fsPath + ' MORE THAN ONCE. CONSIDER CONSOLIDATING CSS RULES');\n                        }\n                        global.cssInlinedResources.push(normalizedFSPath);\n                        var MIME = /\\.svg$/.test(url) ? 'image/svg+xml' : 'image/png';\n                        var DATA = ';base64,' + fileContents.toString('base64');\n                        if (!forceBase64 && /\\.svg$/.test(url)) {\n                            // .svg => url encode as explained at https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n                            var newText = fileContents.toString()\n                                .replace(/\"/g, '\\'')\n                                .replace(/</g, '%3C')\n                                .replace(/>/g, '%3E')\n                                .replace(/&/g, '%26')\n                                .replace(/#/g, '%23')\n                                .replace(/\\s+/g, ' ');\n                            var encodedData = ',' + newText;\n                            if (encodedData.length < DATA.length) {\n                                DATA = encodedData;\n                            }\n                        }\n                        return '\"data:' + MIME + DATA + '\"';\n                    }\n                }\n                var absoluteUrl = Utilities.joinPaths(Utilities.pathOf(originalFile), url);\n                return Utilities.relativePath(newFile, absoluteUrl);\n            });\n        };\n        return Utilities;\n    }());\n    CSSLoaderPlugin.Utilities = Utilities;\n    (function () {\n        var cssLoader = null;\n        var isElectron = (typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions['electron'] !== 'undefined');\n        if (typeof process !== 'undefined' && process.versions && !!process.versions.node && !isElectron) {\n            cssLoader = new NodeCSSLoader();\n        }\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 9') >= 0) {\n            cssLoader = new IE9CSSLoader();\n        }\n        else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('MSIE 8') >= 0) {\n            cssLoader = new IE8CSSLoader();\n        }\n        else {\n            cssLoader = new BrowserCSSLoader();\n        }\n        define('vs/css', new CSSPlugin(cssLoader));\n    })();\n})(CSSLoaderPlugin || (CSSLoaderPlugin = {}));\n"]}