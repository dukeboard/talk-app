{"version":3,"sources":["fake","file:///C:/Alex/src/vscode/src/vs/languages/razor/common/razorWorker.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;;;gGAGgG;;;;;;;;IAKhG;QACC,IAAI,UAAU,GAA+B;YAC5C,CAAC,EAAE,CAAC,YAAY,EAAE,gBAAgB,EAAE,cAAc,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,CAAC;YAC5F,GAAG,EAAE,CAAC,wBAAwB,CAAC;YAC/B,IAAI,EAAE,CAAC,YAAY,EAAE,gBAAgB,EAAE,kBAAkB,CAAC;YAC1D,KAAK,EAAE,CAAC,SAAS,EAAE,YAAY,CAAC;YAChC,KAAK,EAAE,CAAC,SAAS,CAAC;YAClB,MAAM,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;YAChC,IAAI,EAAE,CAAC,oBAAoB,CAAC;SAC5B,CAAC;QAEF,MAAM,CAAC;YACN,KAAK,EAAE,cAAM,OAAA,OAAO,EAAP,CAAO;YACpB,WAAW,EAAE,UAAC,SAAgC;gBAC7C,gBAAgB;YACjB,CAAC;YACD,iBAAiB,EAAE,UAAC,GAAW,EAAE,SAAoD;gBACpF,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACT,IAAI,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;oBACjC,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;wBAChB,UAAU,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,EAAlB,CAAkB,CAAC,CAAC;oBAC7C,CAAC;gBACF,CAAC;YACF,CAAC;YACD,aAAa,EAAE,UAAC,GAAW,EAAE,SAAiB,EAAE,SAAkC;gBACjF,YAAY;YACb,CAAC;SACD,CAAC;IACH,CAAC;IA5Be,2BAAmB,sBA4BlC,CAAA;IAED;QAAiC,+BAAqB;QAAtD;YAAiC,8BAAqB;QAOtD,CAAC;QALU,2CAAqB,GAA/B,UAAgC,SAAsC;YACrE,8DAA8D;YAC9D,SAAS,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QACvC,CAAC;QAEF,kBAAC;IAAD,CAPA,AAOC,CAPgC,UAAU,CAAC,UAAU,GAOrD;IAPY,mBAAW,cAOvB,CAAA;;;AD7CD","file":"vs/languages/razor/common/razorWorker.js","sourcesContent":["}).call(this);","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport htmlWorker = require('vs/languages/html/common/htmlWorker');\nimport htmlTags = require('vs/languages/html/common/htmlTags');\n\nexport function getRazorTagProvider() : htmlTags.IHTMLTagProvider {\n\tvar customTags : { [tag:string]: string[]} = {\n\t\ta: ['asp-action', 'asp-controller', 'asp-fragment', 'asp-host', 'asp-protocol', 'asp-route'],\n\t\tdiv: ['asp-validation-summary'],\n\t\tform: ['asp-action', 'asp-controller', 'asp-anti-forgery'],\n\t\tinput: ['asp-for', 'asp-format'],\n\t\tlabel: ['asp-for'],\n\t\tselect: ['asp-for', 'asp-items'],\n\t\tspan: ['asp-validation-for']\n\t};\n\n\treturn {\n\t\tgetId: () => 'razor',\n\t\tcollectTags: (collector: (tag: string) => void) => {\n\t\t\t// no extra tags\n\t\t},\n\t\tcollectAttributes: (tag: string, collector: (attribute: string, type: string) => void) => {\n\t\t\tif (tag) {\n\t\t\t\tvar attributes = customTags[tag];\n\t\t\t\tif (attributes) {\n\t\t\t\t\tattributes.forEach(a => collector(a, null));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcollectValues: (tag: string, attribute: string, collector: (value: string) => void) => {\n\t\t\t// no values\n\t\t}\n\t};\n}\n\nexport class RAZORWorker extends htmlWorker.HTMLWorker {\n\n\tprotected addCustomTagProviders(providers: htmlTags.IHTMLTagProvider[]): void {\n\t\t// don't call super and don't add the angular provider for now\n\t\tproviders.push(getRazorTagProvider());\n\t}\n\n}"]}