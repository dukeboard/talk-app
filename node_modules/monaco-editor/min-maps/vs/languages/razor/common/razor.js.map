{"version":3,"sources":["vs/languages/razor/common/fake","vs/languages/razor/common/razor.js","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/razorTokenTypes.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/vsxmlTokenTypes.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/vsxml.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/csharpTokenization.ts","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/razor.ts"],"names":["__m","__M","deps","result","i","len","length","define","require","exports","EMBED_CS","TOKEN_VALUE","TOKEN_KEY","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","objects","errors","abstractState_1","vsxmlTokenTypes","separators","whitespace","isEntity","createKeywordMatcher","isAttribute","isSeparator","split","EmbeddedState","_super","mode","state","parentState","call","getParentState","makeClone","getMode","AbstractState","safeClone","equals","other","safeEquals","setState","nextState","postTokenize","stream","tokenize","undefined","VSXMLEmbeddedState","setVSXMLState","eos","VSXMLState","name","parent","whitespaceTokenType","setTokenRules","skipWhitespace","type","stateTokenize","notImplemented","VSXMLString","clone","token","nextToken","VSXMLTag","tokenType","VSXMLExpression","htmlMode","VSXML","abstractMode_1","razorTokenTypes","htmlTokenTypes","punctuations","brackets","bracketsSource","open","close","MAP","bracket","stringIsBracket","text","tokenTypeFromString","isKeyword","ispunctuation","character","indexOf","CSState","otherCSState","Error","CSString","punctuation","isAtBeginning","readChars","c","next","goBack","CSVerbatimString","peek","CSNumber","firstDigit","base","isDecimal","isExponent","isDigit","toLowerCase","CSComment","commentChar","peekWhitespace","CSStatement","level","plevel","razorMode","expression","firstToken","firstTokenWasKeyword","vsState","newVSState","st","acceptNestedModes","nextStateAtEnd","test","CSSimpleHTML","States","Content","peekToken","advanceToEOS","tr","nextName","advanceIfRegExp","nextAttrValue","WithinComment","advanceUntil","COMMENT","advanceIfString","DELIM_COMMENT","WithinDoctype","DOCTYPE","DELIM_DOCTYPE","OpeningEndTag","DELIM_END","OpeningStartTag","DELIM_START","tagName","getTag","WithinTag","AttributeName","ATTRIB_NAME","AttributeValue","value","ATTRIB_VALUE","__decorate","decorators","target","key","desc","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","modes","csharpTokenization","instantiation_1","modeService_1","languageConfigurationRegistry_1","async_1","compatWorkerService_1","workspace_1","configuration_1","RAZORState","kind","lastTagName","lastAttributeName","embeddedContentType","attributeValueQuote","attributeValueLength","State","RAZORMode","descriptor","instantiationService","modeService","compatWorkerService","workspaceContextService","configurationService","_registerSupports","_this","SuggestRegistry","register","getId","triggerCharacters","provideCompletionItems","model","position","wireCancellationToken","_provideCompletionItems","uri","DocumentHighlightProviderRegistry","provideDocumentHighlights","_provideDocumentHighlights","LinkProviderRegistry","provideLinks","LanguageConfigurationRegistry","LANG_CONFIG","_createModeWorkerManager","ModeWorkerManager","getInitialState","getLeavingNestedModeData","line","leavingNestedModeData","stateAfterNestedMode","wordPattern","createWordRegExp","comments","blockComment","__electricCharacterSupport","embeddedElectricCharacters","autoClosingPairs","surroundingPairs","onEnterRules","beforeText","RegExp","EMPTY_ELEMENTS","join","afterText","action","indentAction","IndentAction","IndentOutdent","Indent","IInstantiationService","IModeService","ICompatWorkerService","IWorkspaceContextService","IConfigurationService","HTMLMode"],"mappings":"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","file":"vs/languages/razor/common/razor.js","sourcesContent":["}).call(this);","/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.6.1(8f43cf5d0d3d233c9ba1c9085f2bb529f834c841)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n(function() {\nvar __m = [\"exports\",\"require\",\"vs/languages/razor/common/razorTokenTypes\",\"vs/languages/razor/common/vsxmlTokenTypes\",\"vs/languages/razor/common/vsxml\",\"vs/base/common/objects\",\"vs/editor/common/modes/abstractMode\",\"vs/editor/common/modes/abstractState\",\"vs/languages/razor/common/csharpTokenization\",\"vs/languages/html/common/html\",\"vs/base/common/errors\",\"vs/languages/razor/common/razor\",\"vs/editor/common/modes\",\"vs/platform/instantiation/common/instantiation\",\"vs/editor/common/services/modeService\",\"vs/editor/common/modes/languageConfigurationRegistry\",\"vs/base/common/async\",\"vs/editor/common/services/compatWorkerService\",\"vs/platform/workspace/common/workspace\",\"vs/platform/configuration/common/configuration\"];\nvar __M = function(deps) {\n  var result = [];\n  for (var i = 0, len = deps.length; i < len; i++) {\n    result[i] = __m[deps[i]];\n  }\n  return result;\n};\ndefine(__m[2], __M([1,0]), function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    'use strict';\n    exports.EMBED_CS = 'support.function.cshtml';\n});\n\ndefine(__m[3], __M([1,0]), function (require, exports) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    'use strict';\n    exports.TOKEN_VALUE = 'support.property-value.constant.other.json';\n    exports.TOKEN_KEY = 'support.type.property-name.json';\n});\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/* In order to use VSXML in your own modes, you need to have an IState\n * which implements IVSXMLWrapperState. Upon a START token such as '///',\n * the wrapper state can return a new VSXMLEmbeddedState as the nextState in\n * the tokenization result.\n*/\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine(__m[4], __M([1,0,5,10,7,3]), function (require, exports, objects, errors, abstractState_1, vsxmlTokenTypes) {\n    'use strict';\n    var separators = '<>\"=/';\n    var whitespace = '\\t ';\n    var isEntity = objects.createKeywordMatcher(['summary', 'reference', 'returns', 'param', 'loc']);\n    var isAttribute = objects.createKeywordMatcher(['type', 'path', 'name', 'locid', 'filename', 'format', 'optional']);\n    var isSeparator = objects.createKeywordMatcher(separators.split(''));\n    var EmbeddedState = (function (_super) {\n        __extends(EmbeddedState, _super);\n        function EmbeddedState(mode, state, parentState) {\n            _super.call(this, mode);\n            this.state = state;\n            this.parentState = parentState;\n        }\n        EmbeddedState.prototype.getParentState = function () {\n            return this.parentState;\n        };\n        EmbeddedState.prototype.makeClone = function () {\n            return new EmbeddedState(this.getMode(), abstractState_1.AbstractState.safeClone(this.state), abstractState_1.AbstractState.safeClone(this.parentState));\n        };\n        EmbeddedState.prototype.equals = function (other) {\n            if (other instanceof EmbeddedState) {\n                return (_super.prototype.equals.call(this, other) &&\n                    abstractState_1.AbstractState.safeEquals(this.state, other.state) &&\n                    abstractState_1.AbstractState.safeEquals(this.parentState, other.parentState));\n            }\n            return false;\n        };\n        EmbeddedState.prototype.setState = function (nextState) {\n            this.state = nextState;\n        };\n        EmbeddedState.prototype.postTokenize = function (result, stream) {\n            return result;\n        };\n        EmbeddedState.prototype.tokenize = function (stream) {\n            var result = this.state.tokenize(stream);\n            if (result.nextState !== undefined) {\n                this.setState(result.nextState);\n            }\n            result.nextState = this;\n            return this.postTokenize(result, stream);\n        };\n        return EmbeddedState;\n    }(abstractState_1.AbstractState));\n    exports.EmbeddedState = EmbeddedState;\n    var VSXMLEmbeddedState = (function (_super) {\n        __extends(VSXMLEmbeddedState, _super);\n        function VSXMLEmbeddedState(mode, state, parentState) {\n            _super.call(this, mode, state, parentState);\n        }\n        VSXMLEmbeddedState.prototype.equals = function (other) {\n            if (other instanceof VSXMLEmbeddedState) {\n                return (_super.prototype.equals.call(this, other));\n            }\n            return false;\n        };\n        VSXMLEmbeddedState.prototype.setState = function (nextState) {\n            _super.prototype.setState.call(this, nextState);\n            this.getParentState().setVSXMLState(nextState);\n        };\n        VSXMLEmbeddedState.prototype.postTokenize = function (result, stream) {\n            if (stream.eos()) {\n                result.nextState = this.getParentState();\n            }\n            return result;\n        };\n        return VSXMLEmbeddedState;\n    }(EmbeddedState));\n    exports.VSXMLEmbeddedState = VSXMLEmbeddedState;\n    var VSXMLState = (function (_super) {\n        __extends(VSXMLState, _super);\n        function VSXMLState(mode, name, parent, whitespaceTokenType) {\n            if (whitespaceTokenType === void 0) { whitespaceTokenType = ''; }\n            _super.call(this, mode);\n            this.name = name;\n            this.parent = parent;\n            this.whitespaceTokenType = whitespaceTokenType;\n        }\n        VSXMLState.prototype.equals = function (other) {\n            if (other instanceof VSXMLState) {\n                return (_super.prototype.equals.call(this, other) &&\n                    this.whitespaceTokenType === other.whitespaceTokenType &&\n                    this.name === other.name &&\n                    abstractState_1.AbstractState.safeEquals(this.parent, other.parent));\n            }\n            return false;\n        };\n        VSXMLState.prototype.tokenize = function (stream) {\n            stream.setTokenRules(separators, whitespace);\n            if (stream.skipWhitespace().length > 0) {\n                return { type: this.whitespaceTokenType };\n            }\n            return this.stateTokenize(stream);\n        };\n        VSXMLState.prototype.stateTokenize = function (stream) {\n            throw errors.notImplemented();\n        };\n        return VSXMLState;\n    }(abstractState_1.AbstractState));\n    exports.VSXMLState = VSXMLState;\n    var VSXMLString = (function (_super) {\n        __extends(VSXMLString, _super);\n        function VSXMLString(mode, parent) {\n            _super.call(this, mode, 'string', parent, vsxmlTokenTypes.TOKEN_VALUE);\n        }\n        VSXMLString.prototype.makeClone = function () {\n            return new VSXMLString(this.getMode(), this.parent ? this.parent.clone() : null);\n        };\n        VSXMLString.prototype.equals = function (other) {\n            if (other instanceof VSXMLString) {\n                return (_super.prototype.equals.call(this, other));\n            }\n            return false;\n        };\n        VSXMLString.prototype.stateTokenize = function (stream) {\n            while (!stream.eos()) {\n                var token = stream.nextToken();\n                if (token === '\"') {\n                    return { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\n                }\n            }\n            return { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\n        };\n        return VSXMLString;\n    }(VSXMLState));\n    exports.VSXMLString = VSXMLString;\n    var VSXMLTag = (function (_super) {\n        __extends(VSXMLTag, _super);\n        function VSXMLTag(mode, parent) {\n            _super.call(this, mode, 'expression', parent, 'vs');\n        }\n        VSXMLTag.prototype.makeClone = function () {\n            return new VSXMLTag(this.getMode(), this.parent ? this.parent.clone() : null);\n        };\n        VSXMLTag.prototype.equals = function (other) {\n            if (other instanceof VSXMLTag) {\n                return (_super.prototype.equals.call(this, other));\n            }\n            return false;\n        };\n        VSXMLTag.prototype.stateTokenize = function (stream) {\n            var token = stream.nextToken();\n            var tokenType = this.whitespaceTokenType;\n            if (token === '>') {\n                return { type: 'punctuation.vs', nextState: this.parent };\n            }\n            else if (token === '\"') {\n                return { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: new VSXMLString(this.getMode(), this) };\n            }\n            else if (isEntity(token)) {\n                tokenType = 'tag.vs';\n            }\n            else if (isAttribute(token)) {\n                tokenType = vsxmlTokenTypes.TOKEN_KEY;\n            }\n            else if (isSeparator(token)) {\n                tokenType = 'punctuation.vs';\n            }\n            return { type: tokenType, nextState: this };\n        };\n        return VSXMLTag;\n    }(VSXMLState));\n    exports.VSXMLTag = VSXMLTag;\n    var VSXMLExpression = (function (_super) {\n        __extends(VSXMLExpression, _super);\n        function VSXMLExpression(mode, parent) {\n            _super.call(this, mode, 'expression', parent, 'vs');\n        }\n        VSXMLExpression.prototype.makeClone = function () {\n            return new VSXMLExpression(this.getMode(), this.parent ? this.parent.clone() : null);\n        };\n        VSXMLExpression.prototype.equals = function (other) {\n            if (other instanceof VSXMLExpression) {\n                return (_super.prototype.equals.call(this, other));\n            }\n            return false;\n        };\n        VSXMLExpression.prototype.stateTokenize = function (stream) {\n            var token = stream.nextToken();\n            if (token === '<') {\n                return { type: 'punctuation.vs', nextState: new VSXMLTag(this.getMode(), this) };\n            }\n            return { type: this.whitespaceTokenType, nextState: this };\n        };\n        return VSXMLExpression;\n    }(VSXMLState));\n    exports.VSXMLExpression = VSXMLExpression;\n});\n\n\n\n\n\n\ndefine(__m[8], __M([1,0,5,9,4,7,6,2]), function (require, exports, objects, htmlMode, VSXML, abstractState_1, abstractMode_1, razorTokenTypes) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    'use strict';\n    var htmlTokenTypes = htmlMode.htmlTokenTypes;\n    var punctuations = '+-*%&|^~!=<>/?;:.,';\n    var separators = '+-*/%&|^~!=<>(){}[]\\\"\\'\\\\/?;:.,';\n    var whitespace = '\\t ';\n    var brackets = (function () {\n        var bracketsSource = [\n            { tokenType: 'punctuation.bracket.cs', open: '{', close: '}' },\n            { tokenType: 'punctuation.array.cs', open: '[', close: ']' },\n            { tokenType: 'punctuation.parenthesis.cs', open: '(', close: ')' }\n        ];\n        var MAP = Object.create(null);\n        for (var i = 0; i < bracketsSource.length; i++) {\n            var bracket = bracketsSource[i];\n            MAP[bracket.open] = {\n                tokenType: bracket.tokenType,\n            };\n            MAP[bracket.close] = {\n                tokenType: bracket.tokenType,\n            };\n        }\n        return {\n            stringIsBracket: function (text) {\n                return !!MAP[text];\n            },\n            tokenTypeFromString: function (text) {\n                return MAP[text].tokenType;\n            }\n        };\n    })();\n    var isKeyword = objects.createKeywordMatcher([\n        'abstract', 'as', 'async', 'await', 'base', 'bool',\n        'break', 'by', 'byte', 'case',\n        'catch', 'char', 'checked', 'class',\n        'const', 'continue', 'decimal', 'default',\n        'delegate', 'do', 'double', 'descending',\n        'explicit', 'event', 'extern', 'else',\n        'enum', 'false', 'finally', 'fixed',\n        'float', 'for', 'foreach', 'from',\n        'goto', 'group', 'if', 'implicit',\n        'in', 'int', 'interface', 'internal',\n        'into', 'is', 'lock', 'long', 'nameof',\n        'new', 'null', 'namespace', 'object',\n        'operator', 'out', 'override', 'orderby',\n        'params', 'private', 'protected', 'public',\n        'readonly', 'ref', 'return', 'switch',\n        'struct', 'sbyte', 'sealed', 'short',\n        'sizeof', 'stackalloc', 'static', 'string',\n        'select', 'this', 'throw', 'true',\n        'try', 'typeof', 'uint', 'ulong',\n        'unchecked', 'unsafe', 'ushort', 'using',\n        'var', 'virtual', 'volatile', 'void', 'when',\n        'while', 'where', 'yield',\n        'model', 'inject' // Razor specific\n    ]);\n    var ispunctuation = function (character) {\n        return punctuations.indexOf(character) > -1;\n    };\n    var CSState = (function (_super) {\n        __extends(CSState, _super);\n        function CSState(mode, name, parent) {\n            _super.call(this, mode);\n            this.name = name;\n            this.parent = parent;\n        }\n        CSState.prototype.equals = function (other) {\n            if (!_super.prototype.equals.call(this, other)) {\n                return false;\n            }\n            var otherCSState = other;\n            return (other instanceof CSState) && (this.getMode() === otherCSState.getMode()) && (this.name === otherCSState.name) && ((this.parent === null && otherCSState.parent === null) || (this.parent !== null && this.parent.equals(otherCSState.parent)));\n        };\n        CSState.prototype.tokenize = function (stream) {\n            stream.setTokenRules(separators, whitespace);\n            if (stream.skipWhitespace().length > 0) {\n                return { type: '' };\n            }\n            return this.stateTokenize(stream);\n        };\n        CSState.prototype.stateTokenize = function (stream) {\n            throw new Error('To be implemented');\n        };\n        return CSState;\n    }(abstractState_1.AbstractState));\n    exports.CSState = CSState;\n    var CSString = (function (_super) {\n        __extends(CSString, _super);\n        function CSString(mode, parent, punctuation) {\n            _super.call(this, mode, 'string', parent);\n            this.isAtBeginning = true;\n            this.punctuation = punctuation;\n        }\n        CSString.prototype.makeClone = function () {\n            return new CSString(this.getMode(), this.parent ? this.parent.clone() : null, this.punctuation);\n        };\n        CSString.prototype.equals = function (other) {\n            return _super.prototype.equals.call(this, other) && this.punctuation === other.punctuation;\n        };\n        CSString.prototype.tokenize = function (stream) {\n            var readChars = this.isAtBeginning ? 1 : 0;\n            this.isAtBeginning = false;\n            while (!stream.eos()) {\n                var c = stream.next();\n                if (c === '\\\\') {\n                    if (readChars === 0) {\n                        if (stream.eos()) {\n                            return { type: 'string.escape.cs' };\n                        }\n                        else {\n                            stream.next();\n                            if (stream.eos()) {\n                                return { type: 'string.escape.cs', nextState: this.parent };\n                            }\n                            else {\n                                return { type: 'string.escape.cs' };\n                            }\n                        }\n                    }\n                    else {\n                        stream.goBack(1);\n                        return { type: 'string.cs' };\n                    }\n                }\n                else if (c === this.punctuation) {\n                    break;\n                }\n                readChars += 1;\n            }\n            return { type: 'string.cs', nextState: this.parent };\n        };\n        return CSString;\n    }(CSState));\n    var CSVerbatimString = (function (_super) {\n        __extends(CSVerbatimString, _super);\n        function CSVerbatimString(mode, parent) {\n            _super.call(this, mode, 'verbatimstring', parent);\n        }\n        CSVerbatimString.prototype.makeClone = function () {\n            return new CSVerbatimString(this.getMode(), this.parent ? this.parent.clone() : null);\n        };\n        CSVerbatimString.prototype.tokenize = function (stream) {\n            while (!stream.eos()) {\n                var token = stream.next();\n                if (token === '\"') {\n                    if (!stream.eos() && stream.peek() === '\"') {\n                        stream.next();\n                    }\n                    else {\n                        return { type: 'string.cs', nextState: this.parent };\n                    }\n                }\n            }\n            return { type: 'string.cs' };\n        };\n        return CSVerbatimString;\n    }(CSState));\n    var CSNumber = (function (_super) {\n        __extends(CSNumber, _super);\n        function CSNumber(mode, parent, firstDigit) {\n            _super.call(this, mode, 'number', parent);\n            this.firstDigit = firstDigit;\n        }\n        CSNumber.prototype.makeClone = function () {\n            return new CSNumber(this.getMode(), this.parent ? this.parent.clone() : null, this.firstDigit);\n        };\n        CSNumber.prototype.tokenize = function (stream) {\n            var character = this.firstDigit;\n            var base = 10, isDecimal = false, isExponent = false;\n            if (character === '0' && !stream.eos()) {\n                character = stream.peek();\n                if (character === 'x') {\n                    base = 16;\n                }\n                else if (character === '.') {\n                    base = 10;\n                }\n                else {\n                    return { type: 'number.cs', nextState: this.parent };\n                }\n                stream.next();\n            }\n            while (!stream.eos()) {\n                character = stream.peek();\n                if (abstractMode_1.isDigit(character, base)) {\n                    stream.next();\n                }\n                else if (base === 10) {\n                    if (character === '.' && !isExponent && !isDecimal) {\n                        isDecimal = true;\n                        stream.next();\n                    }\n                    else if (character.toLowerCase() === 'e' && !isExponent) {\n                        isExponent = true;\n                        stream.next();\n                        if (!stream.eos() && stream.peek() === '-') {\n                            stream.next();\n                        }\n                    }\n                    else if (character.toLowerCase() === 'f' || character.toLowerCase() === 'd') {\n                        stream.next();\n                        break;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                else {\n                    break;\n                }\n            }\n            var tokenType = 'number';\n            if (base === 16) {\n                tokenType += '.hex';\n            }\n            return { type: tokenType + '.cs', nextState: this.parent };\n        };\n        return CSNumber;\n    }(CSState));\n    // the multi line comment\n    var CSComment = (function (_super) {\n        __extends(CSComment, _super);\n        function CSComment(mode, parent, commentChar) {\n            _super.call(this, mode, 'comment', parent);\n            this.commentChar = commentChar;\n        }\n        CSComment.prototype.makeClone = function () {\n            return new CSComment(this.getMode(), this.parent ? this.parent.clone() : null, this.commentChar);\n        };\n        CSComment.prototype.tokenize = function (stream) {\n            while (!stream.eos()) {\n                var token = stream.next();\n                if (token === '*' && !stream.eos() && !stream.peekWhitespace() && stream.peek() === this.commentChar) {\n                    stream.next();\n                    return { type: 'comment.cs', nextState: this.parent };\n                }\n            }\n            return { type: 'comment.cs' };\n        };\n        return CSComment;\n    }(CSState));\n    exports.CSComment = CSComment;\n    var CSStatement = (function (_super) {\n        __extends(CSStatement, _super);\n        function CSStatement(mode, parent, level, plevel, razorMode, expression, firstToken, firstTokenWasKeyword) {\n            _super.call(this, mode, 'expression', parent);\n            this.level = level;\n            this.plevel = plevel;\n            this.razorMode = razorMode;\n            this.expression = expression;\n            this.vsState = new VSXML.VSXMLExpression(mode, null);\n            this.firstToken = firstToken;\n            this.firstTokenWasKeyword = firstTokenWasKeyword;\n        }\n        CSStatement.prototype.setVSXMLState = function (newVSState) {\n            this.vsState = newVSState;\n        };\n        CSStatement.prototype.makeClone = function () {\n            var st = new CSStatement(this.getMode(), this.parent ? this.parent.clone() : null, this.level, this.plevel, this.razorMode, this.expression, this.firstToken, this.firstTokenWasKeyword);\n            if (this.vsState !== null) {\n                st.setVSXMLState(this.vsState.clone());\n            }\n            return st;\n        };\n        CSStatement.prototype.equals = function (other) {\n            return _super.prototype.equals.call(this, other) &&\n                (other instanceof CSStatement) &&\n                ((this.vsState === null && other.vsState === null) ||\n                    (this.vsState !== null && this.vsState.equals(other.vsState)));\n        };\n        CSStatement.prototype.stateTokenize = function (stream) {\n            if (abstractMode_1.isDigit(stream.peek(), 10)) {\n                this.firstToken = false;\n                return { nextState: new CSNumber(this.getMode(), this, stream.next()) };\n            }\n            var token = stream.nextToken();\n            var acceptNestedModes = !this.firstTokenWasKeyword;\n            var nextStateAtEnd = (this.level <= 0 && this.plevel <= 0 && stream.eos() ? this.parent : undefined);\n            if (stream.eos()) {\n                this.firstTokenWasKeyword = false; // Set this for the state starting on the next line.\n            }\n            if (isKeyword(token)) {\n                if (this.level <= 0) {\n                    this.expression = false;\n                }\n                if (this.firstToken) {\n                    this.firstTokenWasKeyword = true;\n                }\n                return { type: 'keyword.cs' };\n            }\n            this.firstToken = false;\n            if (this.razorMode && token === '<' && acceptNestedModes) {\n                if (!stream.eos() && /[_:!\\/\\w]/.test(stream.peek())) {\n                    return { nextState: new CSSimpleHTML(this.getMode(), this, htmlMode.States.Content) };\n                }\n            }\n            // exit expressions on anything that doesn't look like part of the same expression\n            if (this.razorMode && this.expression && this.level <= 0 && this.plevel <= 0 && !stream.eos()) {\n                if (!/^(\\.|\\[|\\(|\\{\\w+)$/.test(stream.peekToken())) {\n                    nextStateAtEnd = this.parent;\n                }\n            }\n            if (token === '/') {\n                if (!stream.eos() && !stream.peekWhitespace()) {\n                    switch (stream.peekToken()) {\n                        case '/':\n                            stream.nextToken();\n                            if (!stream.eos() && stream.peekToken() === '/') {\n                                stream.nextToken();\n                                if (stream.eos()) {\n                                    return {\n                                        type: 'comment.vs'\n                                    };\n                                }\n                                if (stream.peekToken() !== '/') {\n                                    return {\n                                        type: 'comment.vs',\n                                        nextState: new VSXML.VSXMLEmbeddedState(this.getMode(), this.vsState, this)\n                                    };\n                                }\n                            }\n                            stream.advanceToEOS();\n                            return { type: 'comment.cs' };\n                        case '*':\n                            stream.nextToken();\n                            return { nextState: new CSComment(this.getMode(), this, '/') };\n                    }\n                }\n                return { type: 'punctuation.cs', nextState: nextStateAtEnd };\n            }\n            if (token === '@') {\n                if (!stream.eos()) {\n                    switch (stream.peekToken()) {\n                        case '\"':\n                            stream.nextToken();\n                            return { nextState: new CSVerbatimString(this.getMode(), this) };\n                        case '*':\n                            stream.nextToken();\n                            return { nextState: new CSComment(this.getMode(), this, '@') };\n                    }\n                }\n            }\n            if (/@?\\w+/.test(token)) {\n                return { type: 'ident.cs', nextState: nextStateAtEnd };\n            }\n            if (token === '\"' || token === '\\'') {\n                return { nextState: new CSString(this.getMode(), this, token) };\n            }\n            if (brackets.stringIsBracket(token)) {\n                var tr = {\n                    type: brackets.tokenTypeFromString(token),\n                    nextState: nextStateAtEnd\n                };\n                if (this.razorMode) {\n                    if (token === '{') {\n                        this.expression = false; // whenever we enter a block, we exit expression mode\n                        this.level++;\n                        if (this.level === 1) {\n                            tr.type = razorTokenTypes.EMBED_CS;\n                            tr.nextState = undefined;\n                        }\n                    }\n                    if (token === '}') {\n                        this.level--;\n                        if (this.level <= 0) {\n                            tr.type = razorTokenTypes.EMBED_CS;\n                            tr.nextState = this.parent;\n                        }\n                    }\n                    if (this.expression) {\n                        if (token === '(') {\n                            this.plevel++;\n                            if (this.plevel === 1) {\n                                tr.type = razorTokenTypes.EMBED_CS;\n                                tr.nextState = undefined;\n                            }\n                        }\n                        if (token === ')') {\n                            this.plevel--;\n                            if (this.expression && this.plevel <= 0) {\n                                tr.type = razorTokenTypes.EMBED_CS;\n                                tr.nextState = this.parent;\n                            }\n                        }\n                        if (token === '[') {\n                            this.plevel++;\n                            tr.nextState = undefined;\n                        }\n                        if (token === ']') {\n                            this.plevel--;\n                        }\n                    }\n                }\n                return tr;\n            }\n            if (ispunctuation(token)) {\n                return { type: 'punctuation.cs', nextState: nextStateAtEnd };\n            }\n            if (this.razorMode && this.expression && this.plevel <= 0) {\n                return { type: '', nextState: this.parent };\n            }\n            return { type: '', nextState: nextStateAtEnd };\n        };\n        return CSStatement;\n    }(CSState));\n    exports.CSStatement = CSStatement;\n    // this state always returns to parent state if it leaves a html tag\n    var CSSimpleHTML = (function (_super) {\n        __extends(CSSimpleHTML, _super);\n        function CSSimpleHTML(mode, parent, state) {\n            _super.call(this, mode, 'number', parent);\n            this.state = state;\n        }\n        CSSimpleHTML.prototype.makeClone = function () {\n            return new CSSimpleHTML(this.getMode(), this.parent ? this.parent.clone() : null, this.state);\n        };\n        CSSimpleHTML.prototype.nextName = function (stream) {\n            return stream.advanceIfRegExp(/^[_:\\w][_:\\w-.\\d]*/);\n        };\n        CSSimpleHTML.prototype.nextAttrValue = function (stream) {\n            return stream.advanceIfRegExp(/^('|').*?\\1/);\n        };\n        CSSimpleHTML.prototype.tokenize = function (stream) {\n            switch (this.state) {\n                case htmlMode.States.WithinComment:\n                    if (stream.advanceUntil('-->', false).length > 0) {\n                        return { type: htmlTokenTypes.COMMENT };\n                    }\n                    if (stream.advanceIfString('-->').length > 0) {\n                        this.state = htmlMode.States.Content;\n                        return { type: htmlTokenTypes.DELIM_COMMENT, nextState: this.parent };\n                    }\n                    break;\n                case htmlMode.States.WithinDoctype:\n                    if (stream.advanceUntil('>', false).length > 0) {\n                        return { type: htmlTokenTypes.DOCTYPE };\n                    }\n                    if (stream.advanceIfString('>').length > 0) {\n                        this.state = htmlMode.States.Content;\n                        return { type: htmlTokenTypes.DELIM_DOCTYPE, nextState: this.parent };\n                    }\n                    break;\n                case htmlMode.States.Content:\n                    if (stream.advanceIfString('!--').length > 0) {\n                        this.state = htmlMode.States.WithinComment;\n                        return { type: htmlTokenTypes.DELIM_COMMENT };\n                    }\n                    if (stream.advanceIfRegExp(/!DOCTYPE/i).length > 0) {\n                        this.state = htmlMode.States.WithinDoctype;\n                        return { type: htmlTokenTypes.DELIM_DOCTYPE };\n                    }\n                    if (stream.advanceIfString('/').length > 0) {\n                        this.state = htmlMode.States.OpeningEndTag;\n                        return { type: htmlTokenTypes.DELIM_END };\n                    }\n                    this.state = htmlMode.States.OpeningStartTag;\n                    return { type: htmlTokenTypes.DELIM_START };\n                case htmlMode.States.OpeningEndTag: {\n                    var tagName = this.nextName(stream);\n                    if (tagName.length > 0) {\n                        return {\n                            type: htmlTokenTypes.getTag(tagName)\n                        };\n                    }\n                    if (stream.advanceIfString('>').length > 0) {\n                        this.state = htmlMode.States.Content;\n                        return { type: htmlTokenTypes.DELIM_END, nextState: this.parent };\n                    }\n                    stream.advanceUntil('>', false);\n                    return { type: '' };\n                }\n                case htmlMode.States.OpeningStartTag: {\n                    var tagName = this.nextName(stream);\n                    if (tagName.length > 0) {\n                        this.state = htmlMode.States.WithinTag;\n                        return {\n                            type: htmlTokenTypes.getTag(tagName)\n                        };\n                    }\n                    break;\n                }\n                case htmlMode.States.WithinTag:\n                    if (stream.skipWhitespace().length > 0) {\n                        return { type: '' };\n                    }\n                    var name = this.nextName(stream);\n                    if (name.length > 0) {\n                        this.state = htmlMode.States.AttributeName;\n                        return { type: htmlTokenTypes.ATTRIB_NAME };\n                    }\n                    if (stream.advanceIfRegExp(/^\\/?>/).length > 0) {\n                        this.state = htmlMode.States.Content;\n                        return { type: htmlTokenTypes.DELIM_START, nextState: this.parent };\n                    }\n                    stream.next();\n                    return { type: '' };\n                case htmlMode.States.AttributeName:\n                    if (stream.skipWhitespace().length > 0 || stream.eos()) {\n                        return { type: '' };\n                    }\n                    if (stream.peek() === '=') {\n                        stream.next();\n                        this.state = htmlMode.States.AttributeValue;\n                        return { type: '' };\n                    }\n                    this.state = htmlMode.States.WithinTag;\n                    return this.tokenize(stream); // no advance yet - jump to WithinTag\n                case htmlMode.States.AttributeValue:\n                    if (stream.skipWhitespace().length > 0 || stream.eos()) {\n                        return { type: '' };\n                    }\n                    var value = this.nextAttrValue(stream);\n                    if (value.length > 0) {\n                        this.state = htmlMode.States.WithinTag;\n                        return { type: htmlTokenTypes.ATTRIB_VALUE };\n                    }\n                    this.state = htmlMode.States.WithinTag;\n                    return this.tokenize(stream); // no advance yet - jump to WithinTag\n            }\n            stream.next();\n            this.state = htmlMode.States.Content;\n            return { type: '', nextState: this.parent };\n        };\n        return CSSimpleHTML;\n    }(CSState));\n});\n\n\n\n\n\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\ndefine(__m[11], __M([1,0,12,9,8,6,2,13,14,15,16,17,18,19]), function (require, exports, modes, htmlMode, csharpTokenization, abstractMode_1, razorTokenTypes, instantiation_1, modeService_1, languageConfigurationRegistry_1, async_1, compatWorkerService_1, workspace_1, configuration_1) {\n    /*---------------------------------------------------------------------------------------------\n     *  Copyright (c) Microsoft Corporation. All rights reserved.\n     *  Licensed under the MIT License. See License.txt in the project root for license information.\n     *--------------------------------------------------------------------------------------------*/\n    'use strict';\n    // for a brief description of the razor syntax see http://www.mikesdotnetting.com/Article/153/Inline-Razor-Syntax-Overview\n    var RAZORState = (function (_super) {\n        __extends(RAZORState, _super);\n        function RAZORState(mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength) {\n            _super.call(this, mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength);\n        }\n        RAZORState.prototype.makeClone = function () {\n            return new RAZORState(this.getMode(), this.kind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValueLength);\n        };\n        RAZORState.prototype.equals = function (other) {\n            if (other instanceof RAZORState) {\n                return (_super.prototype.equals.call(this, other));\n            }\n            return false;\n        };\n        RAZORState.prototype.tokenize = function (stream) {\n            if (!stream.eos() && stream.peek() === '@') {\n                stream.next();\n                if (!stream.eos() && stream.peek() === '*') {\n                    return { nextState: new csharpTokenization.CSComment(this.getMode(), this, '@') };\n                }\n                if (stream.eos() || stream.peek() !== '@') {\n                    return { type: razorTokenTypes.EMBED_CS, nextState: new csharpTokenization.CSStatement(this.getMode(), this, 0, 0, true, true, true, false) };\n                }\n            }\n            return _super.prototype.tokenize.call(this, stream);\n        };\n        return RAZORState;\n    }(htmlMode.State));\n    var RAZORMode = (function (_super) {\n        __extends(RAZORMode, _super);\n        function RAZORMode(descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService, configurationService) {\n            _super.call(this, descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService, configurationService);\n        }\n        RAZORMode.prototype._registerSupports = function () {\n            var _this = this;\n            modes.SuggestRegistry.register(this.getId(), {\n                triggerCharacters: ['.', ':', '<', '\"', '=', '/'],\n                provideCompletionItems: function (model, position, token) {\n                    return async_1.wireCancellationToken(token, _this._provideCompletionItems(model.uri, position));\n                }\n            }, true);\n            modes.DocumentHighlightProviderRegistry.register(this.getId(), {\n                provideDocumentHighlights: function (model, position, token) {\n                    return async_1.wireCancellationToken(token, _this._provideDocumentHighlights(model.uri, position));\n                }\n            }, true);\n            modes.LinkProviderRegistry.register(this.getId(), {\n                provideLinks: function (model, token) {\n                    return async_1.wireCancellationToken(token, _this.provideLinks(model.uri));\n                }\n            }, true);\n            languageConfigurationRegistry_1.LanguageConfigurationRegistry.register(this.getId(), RAZORMode.LANG_CONFIG);\n        };\n        RAZORMode.prototype._createModeWorkerManager = function (descriptor, instantiationService) {\n            return new abstractMode_1.ModeWorkerManager(descriptor, 'vs/languages/razor/common/razorWorker', 'RAZORWorker', 'vs/languages/html/common/htmlWorker', instantiationService);\n        };\n        RAZORMode.prototype.getInitialState = function () {\n            return new RAZORState(this, htmlMode.States.Content, '', '', '', '', 0);\n        };\n        RAZORMode.prototype.getLeavingNestedModeData = function (line, state) {\n            var leavingNestedModeData = _super.prototype.getLeavingNestedModeData.call(this, line, state);\n            if (leavingNestedModeData) {\n                leavingNestedModeData.stateAfterNestedMode = new RAZORState(this, htmlMode.States.Content, '', '', '', '', 0);\n            }\n            return leavingNestedModeData;\n        };\n        RAZORMode.LANG_CONFIG = {\n            wordPattern: abstractMode_1.createWordRegExp('#?%'),\n            comments: {\n                blockComment: ['<!--', '-->']\n            },\n            brackets: [\n                ['<!--', '-->'],\n                ['{', '}'],\n                ['(', ')']\n            ],\n            __electricCharacterSupport: {\n                embeddedElectricCharacters: ['*', '}', ']', ')']\n            },\n            autoClosingPairs: [\n                { open: '{', close: '}' },\n                { open: '[', close: ']' },\n                { open: '(', close: ')' },\n                { open: '\"', close: '\"' },\n                { open: '\\'', close: '\\'' }\n            ],\n            surroundingPairs: [\n                { open: '\"', close: '\"' },\n                { open: '\\'', close: '\\'' }\n            ],\n            onEnterRules: [\n                {\n                    beforeText: new RegExp(\"<(?!(?:\" + htmlMode.EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n                    afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n                    action: { indentAction: modes.IndentAction.IndentOutdent }\n                },\n                {\n                    beforeText: new RegExp(\"<(?!(?:\" + htmlMode.EMPTY_ELEMENTS.join('|') + \"))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n                    action: { indentAction: modes.IndentAction.Indent }\n                }\n            ],\n        };\n        RAZORMode = __decorate([\n            __param(1, instantiation_1.IInstantiationService),\n            __param(2, modeService_1.IModeService),\n            __param(3, compatWorkerService_1.ICompatWorkerService),\n            __param(4, workspace_1.IWorkspaceContextService),\n            __param(5, configuration_1.IConfigurationService)\n        ], RAZORMode);\n        return RAZORMode;\n    }(htmlMode.HTMLMode));\n    exports.RAZORMode = RAZORMode;\n});\n\n}).call(this);\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport const EMBED_CS = 'support.function.cshtml';\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport const TOKEN_VALUE = 'support.property-value.constant.other.json';\nexport const TOKEN_KEY = 'support.type.property-name.json';","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/* In order to use VSXML in your own modes, you need to have an IState\n * which implements IVSXMLWrapperState. Upon a START token such as '///',\n * the wrapper state can return a new VSXMLEmbeddedState as the nextState in\n * the tokenization result.\n*/\n\n\n'use strict';\n\nimport objects = require('vs/base/common/objects');\nimport errors = require('vs/base/common/errors');\nimport Modes = require('vs/editor/common/modes');\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport vsxmlTokenTypes = require('vs/languages/razor/common/vsxmlTokenTypes');\n\nvar separators = '<>\"=/';\nvar whitespace = '\\t ';\nvar isEntity = objects.createKeywordMatcher(['summary', 'reference', 'returns', 'param', 'loc']);\nvar isAttribute = objects.createKeywordMatcher(['type', 'path', 'name', 'locid', 'filename', 'format', 'optional']);\nvar isSeparator = objects.createKeywordMatcher(separators.split(''));\n\nexport interface IVSXMLWrapperState extends Modes.IState {\n\tsetVSXMLState(newVSXMLState:VSXMLState):void;\n}\n\nexport class EmbeddedState extends AbstractState {\n\n\tprivate state:Modes.IState;\n\tprivate parentState:Modes.IState;\n\n\tconstructor(mode:Modes.IMode, state:Modes.IState, parentState:Modes.IState) {\n\t\tsuper(mode);\n\t\tthis.state = state;\n\t\tthis.parentState = parentState;\n\t}\n\n\tpublic getParentState():Modes.IState {\n\t\treturn this.parentState;\n\t}\n\n\tpublic makeClone(): EmbeddedState {\n\t\treturn new EmbeddedState(this.getMode(), AbstractState.safeClone(this.state), AbstractState.safeClone(this.parentState));\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof EmbeddedState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other) &&\n\t\t\t\tAbstractState.safeEquals(this.state, other.state) &&\n\t\t\t\tAbstractState.safeEquals(this.parentState, other.parentState)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic setState(nextState:Modes.IState):void {\n\t\tthis.state = nextState;\n\t}\n\n\tpublic postTokenize(result:Modes.ITokenizationResult, stream:Modes.IStream) : Modes.ITokenizationResult {\n\t\treturn result;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream) : Modes.ITokenizationResult {\n\t\tvar result = this.state.tokenize(stream);\n\t\tif (result.nextState !== undefined) {\n\t\t\tthis.setState(result.nextState);\n\t\t}\n\t\tresult.nextState = this;\n\t\treturn this.postTokenize(result, stream);\n\t}\n}\n\nexport class VSXMLEmbeddedState extends EmbeddedState {\n\n\tconstructor(mode:Modes.IMode, state:Modes.IState, parentState:IVSXMLWrapperState) {\n\t\tsuper(mode, state, parentState);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLEmbeddedState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic setState(nextState:Modes.IState):void{\n\t\tsuper.setState(nextState);\n\t\t(<IVSXMLWrapperState> this.getParentState()).setVSXMLState(<VSXMLState>nextState);\n\t}\n\n\tpublic postTokenize(result:Modes.ITokenizationResult, stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tif (stream.eos()) {\n\t\t\tresult.nextState = this.getParentState();\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class VSXMLState extends AbstractState {\n\n\tpublic parent:Modes.IState;\n\tpublic whitespaceTokenType:string;\n\tprivate name:string;\n\n\tconstructor(mode:Modes.IMode, name:string, parent:Modes.IState, whitespaceTokenType:string='') {\n\t\tsuper(mode);\n\t\tthis.name = name;\n\t\tthis.parent = parent;\n\t\tthis.whitespaceTokenType = whitespaceTokenType;\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other) &&\n\t\t\t\tthis.whitespaceTokenType === other.whitespaceTokenType &&\n\t\t\t\tthis.name === other.name &&\n\t\t\t\tAbstractState.safeEquals(this.parent, other.parent)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tstream.setTokenRules(separators, whitespace);\n\t\tif (stream.skipWhitespace().length > 0) {\n\t\t\treturn { type: this.whitespaceTokenType };\n\t\t}\n\t\treturn this.stateTokenize(stream);\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tthrow errors.notImplemented();\n\t}\n}\n\nexport class VSXMLString extends VSXMLState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'string', parent, vsxmlTokenTypes.TOKEN_VALUE);\n\t}\n\n\tpublic makeClone():VSXMLString {\n\t\treturn new VSXMLString(this.getMode(), this.parent ? this.parent.clone() : null);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLString) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.nextToken();\n\t\t\tif (token === '\"') {\n\t\t\t\treturn { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\n\t\t\t}\n\t\t}\n\t\treturn { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: this.parent };\n\t}\n}\n\nexport class VSXMLTag extends VSXMLState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'expression', parent, 'vs');\n\t}\n\n\tpublic makeClone():VSXMLTag {\n\t\treturn new VSXMLTag(this.getMode(), this.parent ? this.parent.clone() : null);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLTag) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar token = stream.nextToken();\n\t\tvar tokenType = this.whitespaceTokenType;\n\t\tif (token === '>') {\n\t\t\treturn { type: 'punctuation.vs', nextState: this.parent };\n\t\t} else if (token === '\"') {\n\t\t\treturn { type: vsxmlTokenTypes.TOKEN_VALUE, nextState: new VSXMLString(this.getMode(), this) };\n\t\t} else if (isEntity(token)) {\n\t\t\ttokenType = 'tag.vs';\n\t\t} else if (isAttribute(token)) {\n\t\t\ttokenType = vsxmlTokenTypes.TOKEN_KEY;\n\t\t} else if (isSeparator(token)) {\n\t\t\ttokenType = 'punctuation.vs';\n\t\t}\n\t\treturn { type:tokenType, nextState: this };\n\t}\n}\n\nexport class VSXMLExpression extends VSXMLState {\n\n\tconstructor(mode:Modes.IMode, parent:Modes.IState) {\n\t\tsuper(mode, 'expression', parent, 'vs');\n\t}\n\n\tpublic makeClone():VSXMLExpression {\n\t\treturn new VSXMLExpression(this.getMode(), this.parent ? this.parent.clone() : null);\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (other instanceof VSXMLExpression) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar token = stream.nextToken();\n\t\tif (token === '<') {\n\t\t\treturn { type: 'punctuation.vs', nextState: new VSXMLTag(this.getMode(), this) };\n\t\t}\n\t\treturn { type: this.whitespaceTokenType, nextState: this};\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport objects = require('vs/base/common/objects');\nimport Modes = require('vs/editor/common/modes');\nimport htmlMode = require('vs/languages/html/common/html');\nimport VSXML = require('vs/languages/razor/common/vsxml');\nimport {AbstractState} from 'vs/editor/common/modes/abstractState';\nimport {isDigit} from 'vs/editor/common/modes/abstractMode';\nimport razorTokenTypes = require('vs/languages/razor/common/razorTokenTypes');\n\nvar htmlTokenTypes = htmlMode.htmlTokenTypes;\n\nvar punctuations = '+-*%&|^~!=<>/?;:.,';\nvar separators = '+-*/%&|^~!=<>(){}[]\\\"\\'\\\\/?;:.,';\nvar whitespace = '\\t ';\n\nvar brackets = (function() {\n\n\tlet bracketsSource = [\n\t\t{ tokenType:'punctuation.bracket.cs', open: '{', close: '}' },\n\t\t{ tokenType:'punctuation.array.cs', open: '[', close: ']' },\n\t\t{ tokenType:'punctuation.parenthesis.cs', open: '(', close: ')' }\n\t];\n\n\tlet MAP: {\n\t\t[text:string]:{\n\t\t\ttokenType: string;\n\t\t}\n\t} = Object.create(null);\n\n\tfor (let i = 0; i < bracketsSource.length; i++) {\n\t\tlet bracket = bracketsSource[i];\n\t\tMAP[bracket.open] = {\n\t\t\ttokenType: bracket.tokenType,\n\t\t};\n\t\tMAP[bracket.close] = {\n\t\t\ttokenType: bracket.tokenType,\n\t\t};\n\t}\n\n\treturn {\n\t\tstringIsBracket: (text:string): boolean => {\n\t\t\treturn !!MAP[text];\n\t\t},\n\t\ttokenTypeFromString: (text:string): string => {\n\t\t\treturn MAP[text].tokenType;\n\t\t}\n\t};\n})();\n\nvar isKeyword = objects.createKeywordMatcher([\n\t'abstract', 'as', 'async', 'await', 'base', 'bool',\n\t'break', 'by', 'byte', 'case',\n\t'catch', 'char', 'checked', 'class',\n\t'const', 'continue', 'decimal', 'default',\n\t'delegate',\t'do', 'double',\t'descending',\n\t'explicit',\t'event', 'extern', 'else',\n\t'enum',\t'false', 'finally', 'fixed',\n\t'float', 'for', 'foreach', 'from',\n\t'goto',\t'group', 'if', 'implicit',\n\t'in', 'int', 'interface', 'internal',\n\t'into', 'is', 'lock', 'long', 'nameof',\n\t'new', 'null', 'namespace', 'object',\n\t'operator', 'out', 'override', 'orderby',\n\t'params', 'private', 'protected', 'public',\n\t'readonly', 'ref', 'return', 'switch',\n\t'struct', 'sbyte', 'sealed', 'short',\n\t'sizeof', 'stackalloc', 'static', 'string',\n\t'select', 'this', 'throw', 'true',\n\t'try', 'typeof', 'uint', 'ulong',\n\t'unchecked', 'unsafe', 'ushort', 'using',\n\t'var', 'virtual', 'volatile', 'void', 'when',\n\t'while', 'where', 'yield',\n\t'model', 'inject' // Razor specific\n]);\n\nvar ispunctuation = (character:string) => {\n\treturn punctuations.indexOf(character) > -1;\n};\n\nexport class CSState extends AbstractState {\n\n\tpublic name:string;\n\tpublic parent:AbstractState;\n\n\tconstructor(mode:Modes.IMode, name:string, parent:AbstractState) {\n\t\tsuper(mode);\n\t\tthis.name = name;\n\t\tthis.parent = parent;\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\tif (!super.equals(other)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar otherCSState:CSState = <CSState>other;\n\t\treturn (other instanceof CSState) && (this.getMode() === otherCSState.getMode()) && (this.name === otherCSState.name) && ((this.parent === null && otherCSState.parent === null) || (this.parent !== null && this.parent.equals(otherCSState.parent)));\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tstream.setTokenRules(separators, whitespace);\n\t\tif (stream.skipWhitespace().length > 0) {\n\t\t\treturn { type: '' };\n\t\t}\n\t\treturn this.stateTokenize(stream);\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tthrow new Error('To be implemented');\n\t}\n}\n\nclass CSString extends CSState {\n\n\tprivate isAtBeginning:boolean;\n\tprivate punctuation:string;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, punctuation:string) {\n\t\tsuper(mode, 'string', parent);\n\t\tthis.isAtBeginning = true;\n\t\tthis.punctuation = punctuation;\n\t}\n\n\tpublic makeClone():CSString {\n\t\treturn new CSString(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.punctuation);\n\t}\n\n\tpublic equals(other:CSString):boolean {\n\t\treturn super.equals(other) && this.punctuation === other.punctuation;\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar readChars = this.isAtBeginning ? 1 : 0;\n\t\tthis.isAtBeginning = false;\n\t\twhile (!stream.eos()) {\n\t\t\tvar c = stream.next();\n\t\t\tif (c === '\\\\') {\n\t\t\t\tif (readChars === 0) {\n\t\t\t\t\tif (stream.eos()) {\n\t\t\t\t\t\treturn { type: 'string.escape.cs' };\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t\tif (stream.eos()) {\n\t\t\t\t\t\t\treturn { type: 'string.escape.cs', nextState: this.parent };\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn { type: 'string.escape.cs' };\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstream.goBack(1);\n\t\t\t\t\treturn { type: 'string.cs' };\n\t\t\t\t}\n\t\t\t} else if (c === this.punctuation) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\treadChars += 1;\n\t\t}\n\t\treturn { type: 'string.cs', nextState: this.parent };\n\t}\n}\n\nclass CSVerbatimString extends CSState {\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState) {\n\t\tsuper(mode, 'verbatimstring', parent);\n\t}\n\n\tpublic makeClone():CSVerbatimString {\n\t\treturn new CSVerbatimString(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.next();\n\t\t\tif (token === '\"') {\n\t\t\t\tif (!stream.eos() && stream.peek() === '\"') {\n\t\t\t\t\tstream.next();\n\t\t\t\t} else {\n\t\t\t\t\treturn { type: 'string.cs', nextState: this.parent };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { type: 'string.cs' };\n\t}\n}\n\nclass CSNumber extends CSState {\n\tprivate firstDigit:string;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, firstDigit:string) {\n\t\tsuper(mode, 'number', parent);\n\t\tthis.firstDigit = firstDigit;\n\t}\n\n\tpublic makeClone():CSNumber {\n\t\treturn new CSNumber(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.firstDigit);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\tvar character = this.firstDigit;\n\t\tvar base = 10, isDecimal = false, isExponent = false;\n\t\tif (character === '0' && !stream.eos()) {\n\t\t\tcharacter = stream.peek();\n\t\t\tif (character === 'x') {\n\t\t\t\tbase = 16;\n\t\t\t} else if (character === '.') {\n\t\t\t\tbase = 10;\n\t\t\t} else {\n\t\t\t\treturn { type: 'number.cs', nextState: this.parent };\n\t\t\t}\n\t\t\tstream.next();\n\t\t}\n\t\twhile (!stream.eos()) {\n\t\t\tcharacter = stream.peek();\n\t\t\tif (isDigit(character, base)) {\n\t\t\t\tstream.next();\n\t\t\t} else if (base === 10) {\n\t\t\t\tif (character === '.' && !isExponent && !isDecimal) {\n\t\t\t\t\tisDecimal = true;\n\t\t\t\t\tstream.next();\n\t\t\t\t} else if (character.toLowerCase() === 'e' && !isExponent) {\n\t\t\t\t\tisExponent = true;\n\t\t\t\t\tstream.next();\n\t\t\t\t\tif (!stream.eos() && stream.peek() === '-') {\n\t\t\t\t\t\tstream.next();\n\t\t\t\t\t}\n\t\t\t\t} else if (character.toLowerCase() === 'f' || character.toLowerCase() === 'd') {\n\t\t\t\t\tstream.next();\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar tokenType = 'number';\n\t\tif (base === 16) {\n\t\t\ttokenType += '.hex';\n\t\t}\n\t\treturn { type: tokenType + '.cs', nextState: this.parent };\n\t}\n}\n\n// the multi line comment\nexport class CSComment extends CSState {\n\tprivate commentChar:string;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, commentChar:string) {\n\t\tsuper(mode, 'comment', parent);\n\t\tthis.commentChar = commentChar;\n\t}\n\n\tpublic makeClone():CSComment {\n\t\treturn new CSComment(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.commentChar);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\t\twhile (!stream.eos()) {\n\t\t\tvar token = stream.next();\n\t\t\tif (token === '*' && !stream.eos() && !stream.peekWhitespace() && stream.peek() === this.commentChar) {\n\t\t\t\tstream.next();\n\t\t\t\treturn { type: 'comment.cs', nextState: this.parent};\n\t\t\t}\n\t\t}\n\t\treturn { type: 'comment.cs' };\n\t}\n}\n\nexport class CSStatement extends CSState implements VSXML.IVSXMLWrapperState {\n\tprivate level:number;\n\tprivate plevel:number;\n\tprivate razorMode:boolean;\n\tprivate expression:boolean;\n\tprivate vsState: VSXML.VSXMLState;\n\tprivate firstToken: boolean;\n\tprivate firstTokenWasKeyword: boolean;\n\n\tconstructor(mode: Modes.IMode, parent: AbstractState, level: number, plevel: number, razorMode: boolean,\n\t\t\t\texpression: boolean, firstToken: boolean, firstTokenWasKeyword: boolean) {\n\t\tsuper(mode, 'expression', parent);\n\t\tthis.level = level;\n\t\tthis.plevel = plevel;\n\t\tthis.razorMode = razorMode;\n\t\tthis.expression = expression;\n\t\tthis.vsState = new VSXML.VSXMLExpression(mode, null);\n\t\tthis.firstToken = firstToken;\n\t\tthis.firstTokenWasKeyword = firstTokenWasKeyword;\n\t}\n\n\tpublic setVSXMLState(newVSState:VSXML.VSXMLState):void {\n\t\tthis.vsState = newVSState;\n\t}\n\n\tpublic makeClone():CSStatement {\n\t\tvar st = new CSStatement(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.level,\n\t\t\tthis.plevel, this.razorMode, this.expression, this.firstToken, this.firstTokenWasKeyword);\n\t\tif (this.vsState !== null) {\n\t\t\tst.setVSXMLState(<VSXML.VSXMLState>this.vsState.clone());\n\t\t}\n\t\treturn st;\n\t}\n\n\tpublic equals(other:Modes.IState):boolean {\n\t\treturn super.equals(other) &&\n\t\t\t\t(other instanceof CSStatement) &&\n\t\t\t\t((this.vsState === null && (<CSStatement>other).vsState === null) ||\n\t\t\t\t(this.vsState !== null && this.vsState.equals((<CSStatement>other).vsState)));\n\t}\n\n\tpublic stateTokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\n\t\tif (isDigit(stream.peek(), 10)) {\n\t\t\tthis.firstToken = false;\n\t\t\treturn { nextState: new CSNumber(this.getMode(), this, stream.next()) };\n\t\t}\n\n\t\tvar token = stream.nextToken();\n\t\tvar acceptNestedModes = !this.firstTokenWasKeyword;\n\t\tvar nextStateAtEnd = (this.level <= 0 && this.plevel <= 0 && stream.eos()  ? this.parent : undefined);\n\n\t\tif (stream.eos()) {\n\t\t\tthis.firstTokenWasKeyword = false; // Set this for the state starting on the next line.\n\t\t}\n\n\t\tif (isKeyword(token)) {\n\t\t\tif (this.level <= 0) {\t// if we find a keyword outside of a block, we know that we are outside of an expression\n\t\t\t\tthis.expression = false;\n\t\t\t}\n\t\t\tif (this.firstToken) {\n\t\t\t\tthis.firstTokenWasKeyword = true;\n\t\t\t}\n\t\t\treturn { type: 'keyword.cs' };\n\t\t}\n\n\t\tthis.firstToken = false;\n\n\t\tif (this.razorMode && token === '<' && acceptNestedModes) {\n\t\t\tif (!stream.eos() && /[_:!\\/\\w]/.test(stream.peek())) {\n\t\t\t\treturn { nextState: new CSSimpleHTML(this.getMode(), this, htmlMode.States.Content) };\n\t\t\t}\n\t\t}\n\n\t\t// exit expressions on anything that doesn't look like part of the same expression\n\t\tif (this.razorMode && this.expression && this.level <= 0 && this.plevel <= 0&& !stream.eos()) {\n\t\t\tif (!/^(\\.|\\[|\\(|\\{\\w+)$/.test(stream.peekToken())) {\n\t\t\t\tnextStateAtEnd = this.parent;\n\t\t\t}\n\t\t}\n\n\t\tif (token === '/') {\n\t\t\tif (!stream.eos() && !stream.peekWhitespace()) {\n\t\t\t\tswitch(stream.peekToken()) {\n\t\t\t\t\tcase '/':\n\t\t\t\t\t\tstream.nextToken();\n\t\t\t\t\t\tif (!stream.eos() && stream.peekToken() === '/') {\n\t\t\t\t\t\t\tstream.nextToken();\n\t\t\t\t\t\t\tif (stream.eos()) {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: 'comment.vs'\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (stream.peekToken() !== '/') {\n\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\ttype: 'comment.vs',\n\t\t\t\t\t\t\t\t\tnextState: new VSXML.VSXMLEmbeddedState(this.getMode(), this.vsState, this)\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstream.advanceToEOS();\n\t\t\t\t\t\treturn { type: 'comment.cs' };\n\t\t\t\t\tcase '*':\n\t\t\t\t\t\tstream.nextToken();\n\t\t\t\t\t\treturn { nextState: new CSComment(this.getMode(), this, '/') };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { type: 'punctuation.cs', nextState: nextStateAtEnd };\n\t\t}\n\t\tif (token === '@') {\t// a verbatim string (or a razor construct)\n\t\t\tif (!stream.eos()) {\n\t\t\t\tswitch(stream.peekToken()) {\n\t\t\t\tcase '\"':\n\t\t\t\t\tstream.nextToken();\n\t\t\t\t\treturn { nextState: new CSVerbatimString(this.getMode(), this) };\n\t\t\t\tcase '*':\n\t\t\t\t\tstream.nextToken();\n\t\t\t\t\treturn { nextState: new CSComment(this.getMode(), this, '@') };\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (/@?\\w+/.test(token)) {\n\t\t\treturn { type: 'ident.cs', nextState: nextStateAtEnd };\n\t\t}\n\n\t\tif (token === '\"' || token === '\\'') { // string or character\n\t\t\treturn { nextState: new CSString(this.getMode(), this, token) };\n\t\t}\n\t\tif (brackets.stringIsBracket(token)) {\n\n\t\t\tvar tr: Modes.ITokenizationResult = {\n\t\t\t\ttype: brackets.tokenTypeFromString(token),\n\t\t\t\tnextState: nextStateAtEnd\n\t\t\t};\n\n\t\t\tif (this.razorMode) {\n\t\t\t\tif (token === '{') {\n\t\t\t\t\tthis.expression = false;\t// whenever we enter a block, we exit expression mode\n\t\t\t\t\tthis.level++;\n\t\t\t\t\tif (this.level === 1) {\n\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\ttr.nextState = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (token === '}') {\n\t\t\t\t\tthis.level--;\n\t\t\t\t\tif (this.level <= 0) {\n\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\ttr.nextState = this.parent;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.expression) {\n\t\t\t\t\tif (token === '(') {\n\t\t\t\t\t\tthis.plevel++;\n\t\t\t\t\t\tif (this.plevel === 1) {\n\t\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\t\ttr.nextState = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (token === ')') {\n\t\t\t\t\t\tthis.plevel--;\n\t\t\t\t\t\tif (this.expression && this.plevel <= 0) {\t// we only leave csharp mode if we are in expression mode\n\t\t\t\t\t\t\ttr.type = razorTokenTypes.EMBED_CS;\n\t\t\t\t\t\t\ttr.nextState = this.parent;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (token === '[') {\n\t\t\t\t\t\tthis.plevel++;\n\t\t\t\t\t\ttr.nextState = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (token === ']') {\n\t\t\t\t\t\tthis.plevel--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tr;\n\t\t}\n\n\t\tif (ispunctuation(token)) {\n\t\t\treturn { type: 'punctuation.cs', nextState: nextStateAtEnd };\n\t\t}\n\n\t\tif (this.razorMode && this.expression && this.plevel <= 0) {\t// in razor mode exit on non-keywords in expressions\n\t\t\treturn { type: '', nextState: this.parent };\n\t\t}\n\n\t\treturn { type: '', nextState: nextStateAtEnd };\n\t}\n}\n\n// this state always returns to parent state if it leaves a html tag\nclass CSSimpleHTML extends CSState {\n\tprivate state:htmlMode.States;\n\n\tconstructor(mode:Modes.IMode, parent:AbstractState, state:htmlMode.States) {\n\t\tsuper(mode, 'number', parent);\n\t\tthis.state = state;\n\t}\n\n\tpublic makeClone():CSSimpleHTML {\n\t\treturn new CSSimpleHTML(this.getMode(), this.parent ? <AbstractState>this.parent.clone() : null, this.state);\n\t}\n\n\tprivate nextName(stream:Modes.IStream):string {\n\t\treturn stream.advanceIfRegExp(/^[_:\\w][_:\\w-.\\d]*/);\n\t}\n\n\tprivate nextAttrValue(stream:Modes.IStream):string {\n\t\treturn stream.advanceIfRegExp(/^('|').*?\\1/);\n\t}\n\n\tpublic tokenize(stream:Modes.IStream):Modes.ITokenizationResult {\n\n\t\tswitch (this.state) {\n\n\t\t\tcase htmlMode.States.WithinComment:\n\t\t\t\tif (stream.advanceUntil('-->', false).length > 0) {\n\t\t\t\t\treturn { type: htmlTokenTypes.COMMENT};\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('-->').length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_COMMENT, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase htmlMode.States.WithinDoctype:\n\t\t\t\tif (stream.advanceUntil('>', false).length > 0) {\n\t\t\t\t\treturn { type: htmlTokenTypes.DOCTYPE };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('>').length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_DOCTYPE, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase htmlMode.States.Content:\n\t\t\t\tif (stream.advanceIfString('!--').length > 0){\n\t\t\t\t\tthis.state = htmlMode.States.WithinComment;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_COMMENT };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfRegExp(/!DOCTYPE/i).length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.WithinDoctype;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_DOCTYPE };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('/').length > 0){\n\t\t\t\t\tthis.state = htmlMode.States.OpeningEndTag;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_END };\n\t\t\t\t}\n\t\t\t\tthis.state = htmlMode.States.OpeningStartTag;\n\t\t\t\treturn { type: htmlTokenTypes.DELIM_START };\n\n\t\t\tcase htmlMode.States.OpeningEndTag: {\n\t\t\t\tlet tagName = this.nextName(stream);\n\t\t\t\tif (tagName.length > 0) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: htmlTokenTypes.getTag(tagName)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfString('>').length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_END, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tstream.advanceUntil('>', false);\n\t\t\t\treturn { type: '' };\n\t\t\t}\n\n\t\t\tcase htmlMode.States.OpeningStartTag: {\n\t\t\t\tlet tagName = this.nextName(stream);\n\t\t\t\tif (tagName.length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: htmlTokenTypes.getTag(tagName)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase htmlMode.States.WithinTag:\n\t\t\t\tif (stream.skipWhitespace().length > 0) {\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tvar name:string = this.nextName(stream);\n\t\t\t\tif (name.length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.AttributeName;\n\t\t\t\t\treturn { type: htmlTokenTypes.ATTRIB_NAME };\n\t\t\t\t}\n\t\t\t\tif (stream.advanceIfRegExp(/^\\/?>/).length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.Content;\n\t\t\t\t\treturn { type: htmlTokenTypes.DELIM_START, nextState: this.parent };\n\t\t\t\t}\n\t\t\t\tstream.next();\n\t\t\t\treturn { type: '' };\n\n\t\t\tcase htmlMode.States.AttributeName:\n\t\t\t\tif (stream.skipWhitespace().length > 0 || stream.eos()) {\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tif (stream.peek() === '=') {\n\t\t\t\t\tstream.next();\n\t\t\t\t\tthis.state = htmlMode.States.AttributeValue;\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\treturn this.tokenize(stream); // no advance yet - jump to WithinTag\n\n\t\t\tcase htmlMode.States.AttributeValue:\n\t\t\t\tif (stream.skipWhitespace().length > 0 || stream.eos()) {\n\t\t\t\t\treturn { type: '' };\n\t\t\t\t}\n\t\t\t\tvar value = this.nextAttrValue(stream);\n\t\t\t\tif (value.length > 0) {\n\t\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\t\treturn { type: htmlTokenTypes.ATTRIB_VALUE };\n\t\t\t\t}\n\t\t\t\tthis.state = htmlMode.States.WithinTag;\n\t\t\t\treturn this.tokenize(stream); // no advance yet - jump to WithinTag\n\t\t}\n\t\tstream.next();\n\t\tthis.state = htmlMode.States.Content;\n\t\treturn { type: '', nextState: this.parent };\n\t}\n}","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport modes = require('vs/editor/common/modes');\nimport htmlMode = require('vs/languages/html/common/html');\nimport csharpTokenization = require('vs/languages/razor/common/csharpTokenization');\nimport {createWordRegExp, ModeWorkerManager} from 'vs/editor/common/modes/abstractMode';\nimport razorTokenTypes = require('vs/languages/razor/common/razorTokenTypes');\nimport {RAZORWorker} from 'vs/languages/razor/common/razorWorker';\nimport {IInstantiationService} from 'vs/platform/instantiation/common/instantiation';\nimport {IModeService} from 'vs/editor/common/services/modeService';\nimport {LanguageConfigurationRegistry, LanguageConfiguration} from 'vs/editor/common/modes/languageConfigurationRegistry';\nimport {ILeavingNestedModeData} from 'vs/editor/common/modes/supports/tokenizationSupport';\nimport {wireCancellationToken} from 'vs/base/common/async';\nimport {ICompatWorkerService} from 'vs/editor/common/services/compatWorkerService';\nimport {IWorkspaceContextService} from 'vs/platform/workspace/common/workspace';\nimport {IConfigurationService} from 'vs/platform/configuration/common/configuration';\n\n// for a brief description of the razor syntax see http://www.mikesdotnetting.com/Article/153/Inline-Razor-Syntax-Overview\n\nclass RAZORState extends htmlMode.State {\n\n\tconstructor(mode:modes.IMode, kind:htmlMode.States, lastTagName:string, lastAttributeName:string, embeddedContentType:string, attributeValueQuote:string, attributeValueLength:number) {\n\t\tsuper(mode, kind, lastTagName, lastAttributeName, embeddedContentType, attributeValueQuote, attributeValueLength);\n\t}\n\n\tpublic makeClone():RAZORState {\n\t\treturn new RAZORState(this.getMode(), this.kind, this.lastTagName, this.lastAttributeName, this.embeddedContentType, this.attributeValueQuote, this.attributeValueLength);\n\t}\n\n\tpublic equals(other:modes.IState):boolean {\n\t\tif (other instanceof RAZORState) {\n\t\t\treturn (\n\t\t\t\tsuper.equals(other)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic tokenize(stream:modes.IStream):modes.ITokenizationResult {\n\n\t\tif (!stream.eos() && stream.peek() === '@') {\n\t\t\tstream.next();\n\t\t\tif (!stream.eos() && stream.peek() === '*') {\n\t\t\t\treturn { nextState: new csharpTokenization.CSComment(this.getMode(), this, '@') };\n\t\t\t}\n\t\t\tif (stream.eos() || stream.peek() !== '@') {\n\t\t\t\treturn { type: razorTokenTypes.EMBED_CS, nextState: new csharpTokenization.CSStatement(this.getMode(), this, 0, 0, true, true, true, false) };\n\t\t\t}\n\t\t}\n\n\t\treturn super.tokenize(stream);\n\t}\n}\n\nexport class RAZORMode extends htmlMode.HTMLMode<RAZORWorker> {\n\n\tpublic static LANG_CONFIG:LanguageConfiguration = {\n\t\twordPattern: createWordRegExp('#?%'),\n\n\t\tcomments: {\n\t\t\tblockComment: ['<!--', '-->']\n\t\t},\n\n\t\tbrackets: [\n\t\t\t['<!--', '-->'],\n\t\t\t['{', '}'],\n\t\t\t['(', ')']\n\t\t],\n\n\t\t__electricCharacterSupport: {\n\t\t\tembeddedElectricCharacters: ['*', '}', ']', ')']\n\t\t},\n\n\t\tautoClosingPairs: [\n\t\t\t{ open: '{', close: '}' },\n\t\t\t{ open: '[', close: ']' },\n\t\t\t{ open: '(', close: ')' },\n\t\t\t{ open: '\"', close: '\"' },\n\t\t\t{ open: '\\'', close: '\\'' }\n\t\t],\n\t\tsurroundingPairs: [\n\t\t\t{ open: '\"', close: '\"' },\n\t\t\t{ open: '\\'', close: '\\'' }\n\t\t],\n\n\t\tonEnterRules: [\n\t\t\t{\n\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\tafterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n\t\t\t\taction: { indentAction: modes.IndentAction.IndentOutdent }\n\t\t\t},\n\t\t\t{\n\t\t\t\tbeforeText: new RegExp(`<(?!(?:${htmlMode.EMPTY_ELEMENTS.join('|')}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),\n\t\t\t\taction: { indentAction: modes.IndentAction.Indent }\n\t\t\t}\n\t\t],\n\t};\n\n\tconstructor(\n\t\tdescriptor:modes.IModeDescriptor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModeService modeService: IModeService,\n\t\t@ICompatWorkerService compatWorkerService: ICompatWorkerService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(descriptor, instantiationService, modeService, compatWorkerService, workspaceContextService, configurationService);\n\t}\n\n\tprotected _registerSupports(): void {\n\t\tmodes.SuggestRegistry.register(this.getId(), {\n\t\t\ttriggerCharacters: ['.', ':', '<', '\"', '=', '/'],\n\t\t\tprovideCompletionItems: (model, position, token): Thenable<modes.ISuggestResult> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideCompletionItems(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.DocumentHighlightProviderRegistry.register(this.getId(), {\n\t\t\tprovideDocumentHighlights: (model, position, token): Thenable<modes.DocumentHighlight[]> => {\n\t\t\t\treturn wireCancellationToken(token, this._provideDocumentHighlights(model.uri, position));\n\t\t\t}\n\t\t}, true);\n\n\t\tmodes.LinkProviderRegistry.register(this.getId(), {\n\t\t\tprovideLinks: (model, token): Thenable<modes.ILink[]> => {\n\t\t\t\treturn wireCancellationToken(token, this.provideLinks(model.uri));\n\t\t\t}\n\t\t}, true);\n\n\t\tLanguageConfigurationRegistry.register(this.getId(), RAZORMode.LANG_CONFIG);\n\t}\n\n\tprotected _createModeWorkerManager(descriptor:modes.IModeDescriptor, instantiationService: IInstantiationService): ModeWorkerManager<RAZORWorker> {\n\t\treturn new ModeWorkerManager<RAZORWorker>(descriptor, 'vs/languages/razor/common/razorWorker', 'RAZORWorker', 'vs/languages/html/common/htmlWorker', instantiationService);\n\t}\n\n\tpublic getInitialState(): modes.IState {\n\t\treturn new RAZORState(this, htmlMode.States.Content, '', '', '', '', 0);\n\t}\n\n\tpublic getLeavingNestedModeData(line:string, state:modes.IState): ILeavingNestedModeData {\n\t\tvar leavingNestedModeData = super.getLeavingNestedModeData(line, state);\n\t\tif (leavingNestedModeData) {\n\t\t\tleavingNestedModeData.stateAfterNestedMode = new RAZORState(this, htmlMode.States.Content, '', '', '', '', 0);\n\t\t}\n\t\treturn leavingNestedModeData;\n\t}\n}\n"]}