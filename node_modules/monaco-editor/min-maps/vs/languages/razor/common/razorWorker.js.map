{"version":3,"sources":["vs/languages/razor/common/fake","vs/languages/razor/common/razorWorker.js","vs/languages/razor/common/file:/C:/Alex/src/vscode/src/vs/languages/razor/common/razorWorker.ts"],"names":["__m","__M","deps","result","i","len","length","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","define","require","exports","htmlWorker","getRazorTagProvider","customTags","a","div","form","input","label","select","span","getId","collectTags","collector","collectAttributes","tag","attributes","forEach","collectValues","attribute","RAZORWorker","_super","apply","arguments","addCustomTagProviders","providers","push","HTMLWorker","call"],"mappings":";;;;;;CAAA,WACA,GAAAA,IAAA,wCAAA,UAAA,UAAA,uCACAC,EAAA,SAAAC,GAEA,IAAA,GADAC,MACAC,EAAA,EAAAC,EAAAH,EAAAI,OAAAF,EAAAC,EAAAD,IACAD,EAAAC,GAAAJ,EAAAE,EAAAE,GAEA,OAAAD,ICaII,EAAaC,MAAQA,KAAKD,WAAc,SAAUE,EAAGC,GAErD,QAASC,KAAOH,KAAKI,YAAcH,EADnC,IAAK,GAAII,KAAKH,GAAOA,EAAEI,eAAeD,KAAIJ,EAAEI,GAAKH,EAAEG,GAEnDJ,GAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAEnFO,QAAOlB,EAAI,GAAIC,GAAK,EAAE,EAAE,IAAK,SAAUkB,EAASC,EAASC,GACrD,YClBJ,SAAAC,KACC,GAAIC,IACHC,GAAI,aAAc,iBAAkB,eAAgB,WAAY,eAAgB,aAChFC,KAAM,0BACNC,MAAO,aAAc,iBAAkB,oBACvCC,OAAQ,UAAW,cACnBC,OAAQ,WACRC,QAAS,UAAW,aACpBC,MAAO,sBAGR,QACCC,MAAO,WAAM,MAAA,SACbC,YAAa,SAACC,KAGdC,kBAAmB,SAACC,EAAaF,GAChC,GAAIE,EAAK,CACR,GAAIC,GAAab,EAAWY,EACxBC,IACHA,EAAWC,QAAQ,SAAAb,GAAK,MAAAS,GAAUT,EAAG,UAIxCc,cAAe,SAACH,EAAaI,EAAmBN,MAxBlCb,EAAAE,oBAAmBA,CA8BnC,IAAAkB,GAAA,SAAAC,GAAA,QAAAD,KAAiCC,EAAAC,MAAAlC,KAAAmC,WAOjC,MAPiCpC,GAAAiC,EAAAC,GAEtBD,EAAAzB,UAAA6B,sBAAV,SAAgCC,GAE/BA,EAAUC,KAAKxB,MAGjBkB,GAPiCnB,EAAW0B,WAA/B3B,GAAAoB,YAAWA,MFtCxBQ,KAAAxC","file":"vs/languages/razor/common/razorWorker.js","sourcesContent":["}).call(this);","/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.6.1(8f43cf5d0d3d233c9ba1c9085f2bb529f834c841)\n * Released under the MIT license\n * https://github.com/Microsoft/vscode/blob/master/LICENSE.txt\n *-----------------------------------------------------------*/\n\n(function() {\nvar __m = [\"vs/languages/razor/common/razorWorker\",\"require\",\"exports\",\"vs/languages/html/common/htmlWorker\"];\nvar __M = function(deps) {\n  var result = [];\n  for (var i = 0, len = deps.length; i < len; i++) {\n    result[i] = __m[deps[i]];\n  }\n  return result;\n};\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\ndefine(__m[0], __M([1,2,3]), function (require, exports, htmlWorker) {\n    \"use strict\";\n    function getRazorTagProvider() {\n        var customTags = {\n            a: ['asp-action', 'asp-controller', 'asp-fragment', 'asp-host', 'asp-protocol', 'asp-route'],\n            div: ['asp-validation-summary'],\n            form: ['asp-action', 'asp-controller', 'asp-anti-forgery'],\n            input: ['asp-for', 'asp-format'],\n            label: ['asp-for'],\n            select: ['asp-for', 'asp-items'],\n            span: ['asp-validation-for']\n        };\n        return {\n            getId: function () { return 'razor'; },\n            collectTags: function (collector) {\n                // no extra tags\n            },\n            collectAttributes: function (tag, collector) {\n                if (tag) {\n                    var attributes = customTags[tag];\n                    if (attributes) {\n                        attributes.forEach(function (a) { return collector(a, null); });\n                    }\n                }\n            },\n            collectValues: function (tag, attribute, collector) {\n                // no values\n            }\n        };\n    }\n    exports.getRazorTagProvider = getRazorTagProvider;\n    var RAZORWorker = (function (_super) {\n        __extends(RAZORWorker, _super);\n        function RAZORWorker() {\n            _super.apply(this, arguments);\n        }\n        RAZORWorker.prototype.addCustomTagProviders = function (providers) {\n            // don't call super and don't add the angular provider for now\n            providers.push(getRazorTagProvider());\n        };\n        return RAZORWorker;\n    }(htmlWorker.HTMLWorker));\n    exports.RAZORWorker = RAZORWorker;\n});\n\n}).call(this);\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport htmlWorker = require('vs/languages/html/common/htmlWorker');\nimport htmlTags = require('vs/languages/html/common/htmlTags');\n\nexport function getRazorTagProvider() : htmlTags.IHTMLTagProvider {\n\tvar customTags : { [tag:string]: string[]} = {\n\t\ta: ['asp-action', 'asp-controller', 'asp-fragment', 'asp-host', 'asp-protocol', 'asp-route'],\n\t\tdiv: ['asp-validation-summary'],\n\t\tform: ['asp-action', 'asp-controller', 'asp-anti-forgery'],\n\t\tinput: ['asp-for', 'asp-format'],\n\t\tlabel: ['asp-for'],\n\t\tselect: ['asp-for', 'asp-items'],\n\t\tspan: ['asp-validation-for']\n\t};\n\n\treturn {\n\t\tgetId: () => 'razor',\n\t\tcollectTags: (collector: (tag: string) => void) => {\n\t\t\t// no extra tags\n\t\t},\n\t\tcollectAttributes: (tag: string, collector: (attribute: string, type: string) => void) => {\n\t\t\tif (tag) {\n\t\t\t\tvar attributes = customTags[tag];\n\t\t\t\tif (attributes) {\n\t\t\t\t\tattributes.forEach(a => collector(a, null));\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcollectValues: (tag: string, attribute: string, collector: (value: string) => void) => {\n\t\t\t// no values\n\t\t}\n\t};\n}\n\nexport class RAZORWorker extends htmlWorker.HTMLWorker {\n\n\tprotected addCustomTagProviders(providers: htmlTags.IHTMLTagProvider[]): void {\n\t\t// don't call super and don't add the angular provider for now\n\t\tproviders.push(getRazorTagProvider());\n\t}\n\n}"]}