{"version":3,"sources":["c:/Alex/src/vscode/out-build/vs/nls.js"],"names":["_nlsPluginGlobal","this","NLSLoaderPlugin","_format","message","args","result","length","replace","match","rest","index","IS_PSEUDO","findLanguageForModule","config","name","localize","data","_i","arguments","createScopedLocalize","scope","idx","defaultValue","restArgs","slice","call","global","Resources","Plugin","undefined","DEFAULT_TAG","document","location","hash","indexOf","Array","prototype","NLSPlugin","setPseudoTranslation","value","create","key","load","req","suffix","getString","keyMap","moduleKey","mk","keys","subKey","apply","isBuild","messages","BUILD_MAP","BUILD_MAP_KEYS","pluginConfig","language","availableLanguages","isArray","_getEntryPointsMap","nlsPluginEntryPoints","write","pluginName","moduleName","entryPoint","getEntryPoint","entryPointsMap","push","asModule","writeFile","hasOwnProperty","fileName","toUrl","contents","entries","i","JSON","stringify","join","finishBuild","bundles","define"],"mappings":"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","file":"vs/nls.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n * Please make sure to make edits in the .ts file at https://github.com/Microsoft/vscode-loader/\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *---------------------------------------------------------------------------------------------\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nvar _nlsPluginGlobal = this;\nvar NLSLoaderPlugin;\n(function (NLSLoaderPlugin) {\n    var global = _nlsPluginGlobal;\n    var Resources = global.Plugin && global.Plugin.Resources ? global.Plugin.Resources : undefined;\n    var DEFAULT_TAG = 'i-default';\n    var IS_PSEUDO = (global && global.document && global.document.location && global.document.location.hash.indexOf('pseudo=true') >= 0);\n    var slice = Array.prototype.slice;\n    function _format(message, args) {\n        var result;\n        if (args.length === 0) {\n            result = message;\n        }\n        else {\n            result = message.replace(/\\{(\\d+)\\}/g, function (match, rest) {\n                var index = rest[0];\n                return typeof args[index] !== 'undefined' ? args[index] : match;\n            });\n        }\n        if (IS_PSEUDO) {\n            // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n            result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n        }\n        return result;\n    }\n    function findLanguageForModule(config, name) {\n        var result = config[name];\n        if (result)\n            return result;\n        result = config['*'];\n        if (result)\n            return result;\n        return null;\n    }\n    function localize(data, message) {\n        var args = [];\n        for (var _i = 0; _i < (arguments.length - 2); _i++) {\n            args[_i] = arguments[_i + 2];\n        }\n        return _format(message, args);\n    }\n    function createScopedLocalize(scope) {\n        return function (idx, defaultValue) {\n            var restArgs = slice.call(arguments, 2);\n            return _format(scope[idx], restArgs);\n        };\n    }\n    var NLSPlugin = (function () {\n        function NLSPlugin() {\n            this.localize = localize;\n        }\n        NLSPlugin.prototype.setPseudoTranslation = function (value) {\n            IS_PSEUDO = value;\n        };\n        NLSPlugin.prototype.create = function (key, data) {\n            return {\n                localize: createScopedLocalize(data[key])\n            };\n        };\n        NLSPlugin.prototype.load = function (name, req, load, config) {\n            config = config || {};\n            if (!name || name.length === 0) {\n                load({\n                    localize: localize\n                });\n            }\n            else {\n                var suffix = void 0;\n                if (Resources && Resources.getString) {\n                    suffix = '.nls.keys';\n                    req([name + suffix], function (keyMap) {\n                        load({\n                            localize: function (moduleKey, index) {\n                                if (!keyMap[moduleKey])\n                                    return 'NLS error: unknown key ' + moduleKey;\n                                var mk = keyMap[moduleKey].keys;\n                                if (index >= mk.length)\n                                    return 'NLS error unknow index ' + index;\n                                var subKey = mk[index];\n                                var args = [];\n                                args[0] = moduleKey + '_' + subKey;\n                                for (var _i = 0; _i < (arguments.length - 2); _i++) {\n                                    args[_i + 1] = arguments[_i + 2];\n                                }\n                                return Resources.getString.apply(Resources, args);\n                            }\n                        });\n                    });\n                }\n                else {\n                    if (config.isBuild) {\n                        req([name + '.nls', name + '.nls.keys'], function (messages, keys) {\n                            NLSPlugin.BUILD_MAP[name] = messages;\n                            NLSPlugin.BUILD_MAP_KEYS[name] = keys;\n                            load(messages);\n                        });\n                    }\n                    else {\n                        var pluginConfig = config['vs/nls'] || {};\n                        var language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n                        suffix = '.nls';\n                        if (language !== null && language !== DEFAULT_TAG) {\n                            suffix = suffix + '.' + language;\n                        }\n                        req([name + suffix], function (messages) {\n                            if (Array.isArray(messages)) {\n                                messages.localize = createScopedLocalize(messages);\n                            }\n                            else {\n                                messages.localize = createScopedLocalize(messages[name]);\n                            }\n                            load(messages);\n                        });\n                    }\n                }\n            }\n        };\n        NLSPlugin.prototype._getEntryPointsMap = function () {\n            global.nlsPluginEntryPoints = global.nlsPluginEntryPoints || {};\n            return global.nlsPluginEntryPoints;\n        };\n        NLSPlugin.prototype.write = function (pluginName, moduleName, write) {\n            // getEntryPoint is a Monaco extension to r.js\n            var entryPoint = write.getEntryPoint();\n            // r.js destroys the context of this plugin between calling 'write' and 'writeFile'\n            // so the only option at this point is to leak the data to a global\n            var entryPointsMap = this._getEntryPointsMap();\n            entryPointsMap[entryPoint] = entryPointsMap[entryPoint] || [];\n            entryPointsMap[entryPoint].push(moduleName);\n            if (moduleName !== entryPoint) {\n                write.asModule(pluginName + '!' + moduleName, 'define([\\'vs/nls\\', \\'vs/nls!' + entryPoint + '\\'], function(nls, data) { return nls.create(\"' + moduleName + '\", data); });');\n            }\n        };\n        NLSPlugin.prototype.writeFile = function (pluginName, moduleName, req, write, config) {\n            var entryPointsMap = this._getEntryPointsMap();\n            if (entryPointsMap.hasOwnProperty(moduleName)) {\n                var fileName = req.toUrl(moduleName + '.nls.js');\n                var contents = [\n                    '/*---------------------------------------------------------',\n                    ' * Copyright (c) Microsoft Corporation. All rights reserved.',\n                    ' *--------------------------------------------------------*/'\n                ], entries = entryPointsMap[moduleName];\n                var data = {};\n                for (var i = 0; i < entries.length; i++) {\n                    data[entries[i]] = NLSPlugin.BUILD_MAP[entries[i]];\n                }\n                contents.push('define(\"' + moduleName + '.nls\", ' + JSON.stringify(data, null, '\\t') + ');');\n                write(fileName, contents.join('\\r\\n'));\n            }\n        };\n        NLSPlugin.prototype.finishBuild = function (write) {\n            write('nls.metadata.json', JSON.stringify({\n                keys: NLSPlugin.BUILD_MAP_KEYS,\n                messages: NLSPlugin.BUILD_MAP,\n                bundles: this._getEntryPointsMap()\n            }, null, '\\t'));\n        };\n        ;\n        NLSPlugin.BUILD_MAP = {};\n        NLSPlugin.BUILD_MAP_KEYS = {};\n        return NLSPlugin;\n    }());\n    NLSLoaderPlugin.NLSPlugin = NLSPlugin;\n    (function () {\n        define('vs/nls', new NLSPlugin());\n    })();\n})(NLSLoaderPlugin || (NLSLoaderPlugin = {}));\n"]}